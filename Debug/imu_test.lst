
imu_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000517c  08000000  0c000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1fff0000  1fff0000  00018000  2**0
                  ALLOC
  2 .data         000000cc  1fff0800  0c00517c  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000001b0  1fff08cc  0c005248  000108cc  2**2
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 000010b0  00000000  00000000  000108d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001493d  00000000  00000000  00011980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002df0  00000000  00000000  000262bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000075de  00000000  00000000  000290ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004898  00000000  00000000  0003068c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009b39  00000000  00000000  00034f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009246  00000000  00000000  0003ea5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ef0  00000000  00000000  00047ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00000778  00000000  00000000  00048b93  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 ff 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	c1 24 00 08 99 02 00 08 00 00 00 00 01 27 00 08     .$...........'..
 800003c:	71 27 00 08 99 02 00 08 99 02 00 08 99 02 00 08     q'..............
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 80000e8:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000f8:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 8000108:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
	...
 8000130:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
	...
 8000170:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 8000180:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 8000190:	91 23 00 08 81 23 00 08 99 02 00 08 99 02 00 08     .#...#..........
 80001a0:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001b0:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
	...
 80001d8:	99 02 00 08 00 00 00 00 99 02 00 08 99 02 00 08     ................
 80001e8:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
	...

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00517c 	.word	0x0c00517c
 800024c:	1fff0800 	.word	0x1fff0800
 8000250:	000000cc 	.word	0x000000cc
 8000254:	0c00517c 	.word	0x0c00517c
 8000258:	1fff0800 	.word	0x1fff0800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1fff08cc 	.word	0x1fff08cc
 8000264:	000001b0 	.word	0x000001b0
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1fff0800 	.word	0x1fff0800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08004e85 	.word	0x08004e85
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08004bed 	.word	0x08004bed

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002ae:	f004 fb4f 	bl	8004950 <SystemCoreSetup>
  SystemCoreClockSetup();
 80002b2:	f004 fbcb 	bl	8004a4c <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2000ffc4 	.word	0x2000ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f004 fb96 	bl	8004a10 <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2000ffc0 	.word	0x2000ffc0

08000390 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	460b      	mov	r3, r1
 800039a:	607a      	str	r2, [r7, #4]
 800039c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	089b      	lsrs	r3, r3, #2
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4618      	mov	r0, r3
 80003a6:	7afb      	ldrb	r3, [r7, #11]
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3204      	adds	r2, #4
 80003b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	f003 0303 	and.w	r3, r3, #3
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	4619      	mov	r1, r3
 80003c0:	23f8      	movs	r3, #248	; 0xf8
 80003c2:	408b      	lsls	r3, r1
 80003c4:	43db      	mvns	r3, r3
 80003c6:	ea02 0103 	and.w	r1, r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	1d02      	adds	r2, r0, #4
 80003ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	2303      	movs	r3, #3
 80003de:	408b      	lsls	r3, r1
 80003e0:	43db      	mvns	r3, r3
 80003e2:	401a      	ands	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4a3a      	ldr	r2, [pc, #232]	; (80004d4 <XMC_GPIO_Init+0x144>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d003      	beq.n	80003f8 <XMC_GPIO_Init+0x68>
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	4a39      	ldr	r2, [pc, #228]	; (80004d8 <XMC_GPIO_Init+0x148>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d10a      	bne.n	800040e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003fc:	7afb      	ldrb	r3, [r7, #11]
 80003fe:	2101      	movs	r1, #1
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	401a      	ands	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	661a      	str	r2, [r3, #96]	; 0x60
 800040c:	e042      	b.n	8000494 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b2db      	uxtb	r3, r3
 8000414:	b25b      	sxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	da3c      	bge.n	8000494 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	7afb      	ldrb	r3, [r7, #11]
 8000420:	409a      	lsls	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000426:	7afb      	ldrb	r3, [r7, #11]
 8000428:	08db      	lsrs	r3, r3, #3
 800042a:	b2db      	uxtb	r3, r3
 800042c:	4618      	mov	r0, r3
 800042e:	7afb      	ldrb	r3, [r7, #11]
 8000430:	08db      	lsrs	r3, r3, #3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	461a      	mov	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	3210      	adds	r2, #16
 800043a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	f003 0307 	and.w	r3, r3, #7
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4619      	mov	r1, r3
 8000448:	2307      	movs	r3, #7
 800044a:	408b      	lsls	r3, r1
 800044c:	43db      	mvns	r3, r3
 800044e:	ea02 0103 	and.w	r1, r2, r3
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	f100 0210 	add.w	r2, r0, #16
 8000458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800045c:	7afb      	ldrb	r3, [r7, #11]
 800045e:	08db      	lsrs	r3, r3, #3
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	7afb      	ldrb	r3, [r7, #11]
 8000466:	08db      	lsrs	r3, r3, #3
 8000468:	b2db      	uxtb	r3, r3
 800046a:	461a      	mov	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	3210      	adds	r2, #16
 8000470:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	7a1b      	ldrb	r3, [r3, #8]
 8000478:	4619      	mov	r1, r3
 800047a:	7afb      	ldrb	r3, [r7, #11]
 800047c:	f003 0307 	and.w	r3, r3, #7
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	ea42 0103 	orr.w	r1, r2, r3
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f100 0210 	add.w	r2, r0, #16
 8000490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000494:	7afb      	ldrb	r3, [r7, #11]
 8000496:	089b      	lsrs	r3, r3, #2
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4618      	mov	r0, r3
 800049c:	7afb      	ldrb	r3, [r7, #11]
 800049e:	089b      	lsrs	r3, r3, #2
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	461a      	mov	r2, r3
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3204      	adds	r2, #4
 80004a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4619      	mov	r1, r3
 80004b2:	7afb      	ldrb	r3, [r7, #11]
 80004b4:	f003 0303 	and.w	r3, r3, #3
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	ea42 0103 	orr.w	r1, r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	1d02      	adds	r2, r0, #4
 80004c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	48028e00 	.word	0x48028e00
 80004d8:	48028f00 	.word	0x48028f00

080004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004e2:	681b      	ldr	r3, [r3, #0]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	2000ffc0 	.word	0x2000ffc0

080004f4 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <XMC_SCU_GetMirrorStatus+0x14>)
 80004fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004fe:	4618      	mov	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	50004000 	.word	0x50004000

0800050c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000514:	f7ff fed2 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <XMC_SCU_lDelay+0x3c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <XMC_SCU_lDelay+0x40>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	0c9a      	lsrs	r2, r3, #18
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	fb02 f303 	mul.w	r3, r2, r3
 800052a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e003      	b.n	800053a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000532:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	429a      	cmp	r2, r3
 8000540:	d3f7      	bcc.n	8000532 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2000ffc0 	.word	0x2000ffc0
 800054c:	431bde83 	.word	0x431bde83

08000550 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000556:	685b      	ldr	r3, [r3, #4]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	50004074 	.word	0x50004074

08000568 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60d3      	str	r3, [r2, #12]
}
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	50004074 	.word	0x50004074

08000584 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f8c5 	bl	800071c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000592:	f000 fac7 	bl	8000b24 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	79db      	ldrb	r3, [r3, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00a      	beq.n	80005b4 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800059e:	f000 faff 	bl	8000ba0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005a2:	bf00      	nop
 80005a4:	f000 faea 	bl	8000b7c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f083 0301 	eor.w	r3, r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f7      	bne.n	80005a4 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7a5b      	ldrb	r3, [r3, #9]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f929 	bl	8000810 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005be:	bf00      	nop
 80005c0:	f7ff ff98 	bl	80004f4 <XMC_SCU_GetMirrorStatus>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1fa      	bne.n	80005c0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7a1b      	ldrb	r3, [r3, #8]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fa82 	bl	8000ad8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7c1b      	ldrb	r3, [r3, #16]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f937 	bl	800084c <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7c5b      	ldrb	r3, [r3, #17]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f95a 	bl	800089c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7c9b      	ldrb	r3, [r3, #18]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f941 	bl	8000874 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7cdb      	ldrb	r3, [r3, #19]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f964 	bl	80008c4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	799b      	ldrb	r3, [r3, #6]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00a      	beq.n	800061a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000604:	f000 fb04 	bl	8000c10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000608:	bf00      	nop
 800060a:	f000 fb29 	bl	8000c60 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800060e:	4603      	mov	r3, r0
 8000610:	f083 0301 	eor.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f7      	bne.n	800060a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	78db      	ldrb	r3, [r3, #3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d109      	bne.n	8000636 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	799b      	ldrb	r3, [r3, #6]
 8000626:	f083 0301 	eor.w	r3, r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	d017      	beq.n	8000660 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8000630:	f000 fb3a 	bl	8000ca8 <XMC_SCU_CLOCK_DisableSystemPll>
 8000634:	e014      	b.n	8000660 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000636:	f000 fb27 	bl	8000c88 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	8899      	ldrh	r1, [r3, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000646:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800064c:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	4608      	mov	r0, r1
 8000656:	4611      	mov	r1, r2
 8000658:	462a      	mov	r2, r5
 800065a:	4623      	mov	r3, r4
 800065c:	f000 fb34 	bl	8000cc8 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000668:	d103      	bne.n	8000672 <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 800066a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800066e:	f000 f855 	bl	800071c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000672:	f7ff fe23 	bl	80002bc <SystemCoreClockUpdate>
}
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bdb0      	pop	{r4, r5, r7, pc}

0800067c <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	0f1b      	lsrs	r3, r3, #28
 8000688:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000690:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	4613      	mov	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4413      	add	r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	461a      	mov	r2, r3
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006a0:	4413      	add	r3, r2
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	601a      	str	r2, [r3, #0]
}
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	50004414 	.word	0x50004414

080006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	0f1b      	lsrs	r3, r3, #28
 80006c0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006c8:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80006d8:	4413      	add	r3, r2
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4013      	ands	r3, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf14      	ite	ne
 80006e4:	2301      	movne	r3, #1
 80006e6:	2300      	moveq	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	5000440c 	.word	0x5000440c

080006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000700:	f7ff feec 	bl	80004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000704:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000708:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	50004600 	.word	0x50004600

0800071c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000724:	4906      	ldr	r1, [pc, #24]	; (8000740 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4313      	orrs	r3, r2
 8000732:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	50004600 	.word	0x50004600

08000744 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 800074c:	4906      	ldr	r1, [pc, #24]	; (8000768 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4313      	orrs	r3, r2
 800075a:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	50004600 	.word	0x50004600

0800076c <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000774:	4906      	ldr	r1, [pc, #24]	; (8000790 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4313      	orrs	r3, r2
 8000782:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	50004600 	.word	0x50004600

08000794 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800079e:	88fb      	ldrh	r3, [r7, #6]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d108      	bne.n	80007b6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007a4:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007ae:	f023 0301 	bic.w	r3, r3, #1
 80007b2:	60d3      	str	r3, [r2, #12]
 80007b4:	e007      	b.n	80007c6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	60d3      	str	r3, [r2, #12]
  }
}
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	50004710 	.word	0x50004710

080007d4 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007de:	bf00      	nop
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80007e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f8      	bne.n	80007e0 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007ee:	4907      	ldr	r1, [pc, #28]	; (800080c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007f8:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007fa:	4313      	orrs	r3, r2
 80007fc:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	50004000 	.word	0x50004000
 800080c:	50004300 	.word	0x50004300

08000810 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800081a:	bf00      	nop
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800081e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f8      	bne.n	800081c <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800082a:	4907      	ldr	r1, [pc, #28]	; (8000848 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000834:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000836:	4313      	orrs	r3, r2
 8000838:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	50004000 	.word	0x50004000
 8000848:	50004300 	.word	0x50004300

0800084c <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000854:	4906      	ldr	r1, [pc, #24]	; (8000870 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000862:	4313      	orrs	r3, r2
 8000864:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	50004600 	.word	0x50004600

08000874 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800087c:	4906      	ldr	r1, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000880:	6a1b      	ldr	r3, [r3, #32]
 8000882:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800088a:	4313      	orrs	r3, r2
 800088c:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	50004600 	.word	0x50004600

0800089c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008b2:	4313      	orrs	r3, r2
 80008b4:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	50004600 	.word	0x50004600

080008c4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008cc:	4906      	ldr	r1, [pc, #24]	; (80008e8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008da:	4313      	orrs	r3, r2
 80008dc:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	50004600 	.word	0x50004600

080008ec <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008f4:	4906      	ldr	r1, [pc, #24]	; (8000910 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000902:	4313      	orrs	r3, r2
 8000904:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	50004600 	.word	0x50004600

08000914 <XMC_SCU_CLOCK_SetWdtClockDivider>:
}
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800091c:	4906      	ldr	r1, [pc, #24]	; (8000938 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000922:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800092a:	4313      	orrs	r3, r2
 800092c:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	50004600 	.word	0x50004600

0800093c <XMC_SCU_CLOCK_SetECATClockDivider>:
}

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 8000944:	4906      	ldr	r1, [pc, #24]	; (8000960 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8000948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800094a:	f023 0203 	bic.w	r2, r3, #3
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3b01      	subs	r3, #1

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 8000952:	4313      	orrs	r3, r2
 8000954:	638b      	str	r3, [r1, #56]	; 0x38
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
}
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	50004600 	.word	0x50004600

08000964 <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800096e:	4a04      	ldr	r2, [pc, #16]	; (8000980 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	6053      	str	r3, [r2, #4]
}
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	50004600 	.word	0x50004600

08000984 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	0f1b      	lsrs	r3, r3, #28
 8000990:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000998:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	4613      	mov	r3, r2
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	4413      	add	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 80009a8:	4413      	add	r3, r2
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	601a      	str	r2, [r3, #0]
}
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	50004648 	.word	0x50004648

080009bc <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	0f1b      	lsrs	r3, r3, #28
 80009c8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80009d0:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	4613      	mov	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	4413      	add	r3, r2
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	461a      	mov	r2, r3
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 80009e0:	4413      	add	r3, r2
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	4013      	ands	r3, r2
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bf14      	ite	ne
 80009ec:	2301      	movne	r3, #1
 80009ee:	2300      	moveq	r3, #0
 80009f0:	b2db      	uxtb	r3, r3
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	50004640 	.word	0x50004640

08000a04 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000a08:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a12:	f023 0302 	bic.w	r3, r3, #2
 8000a16:	6153      	str	r3, [r2, #20]
}
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	50004710 	.word	0x50004710

08000a24 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a2e:	4a28      	ldr	r2, [pc, #160]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8000a3a:	bf00      	nop
 8000a3c:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a3e:	691b      	ldr	r3, [r3, #16]
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0f9      	beq.n	8000a3c <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a48:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	f043 0310 	orr.w	r3, r3, #16
 8000a52:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a54:	491e      	ldr	r1, [pc, #120]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a62:	4313      	orrs	r3, r2
 8000a64:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a66:	4a1a      	ldr	r2, [pc, #104]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a70:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	f023 0310 	bic.w	r3, r3, #16
 8000a7c:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000a7e:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a88:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000a8a:	bf00      	nop
 8000a8c:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a8e:	691b      	ldr	r3, [r3, #16]
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d0f9      	beq.n	8000a8c <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f023 0301 	bic.w	r3, r3, #1
 8000aa2:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000aa4:	bf00      	nop
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aa8:	691b      	ldr	r3, [r3, #16]
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1f9      	bne.n	8000aa6 <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000ab2:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000abc:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000ac0:	2208      	movs	r2, #8
 8000ac2:	60da      	str	r2, [r3, #12]
}
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	50004710 	.word	0x50004710
 8000ad4:	50004160 	.word	0x50004160

08000ad8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000aec:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d10e      	bne.n	8000b12 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000af4:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000afe:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000b00:	2064      	movs	r0, #100	; 0x64
 8000b02:	f7ff fd03 	bl	800050c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000b06:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b10:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000b12:	2064      	movs	r0, #100	; 0x64
 8000b14:	f7ff fcfa 	bl	800050c <XMC_SCU_lDelay>
}
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	50004710 	.word	0x50004710

08000b24 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d109      	bne.n	8000b48 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b3a:	bf00      	nop
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d0f9      	beq.n	8000b3c <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00a      	beq.n	8000b6a <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5a:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000b5c:	bf00      	nop
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d1f9      	bne.n	8000b5e <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	50004200 	.word	0x50004200
 8000b78:	50004400 	.word	0x50004400

08000b7c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 0308 	and.w	r3, r3, #8
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	bf0c      	ite	eq
 8000b8c:	2301      	moveq	r3, #1
 8000b8e:	2300      	movne	r3, #0
 8000b90:	b2db      	uxtb	r3, r3
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	50004300 	.word	0x50004300

08000ba0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000ba4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000ba8:	f7ff fcde 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000bac:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bb6:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000bb8:	bf00      	nop
 8000bba:	f7ff fcc9 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0f8      	beq.n	8000bba <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000bc8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bcc:	f7ff fccc 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000bd6:	bf00      	nop
 8000bd8:	f7ff fcba 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d0f8      	beq.n	8000bd8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000be6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000bea:	f7ff fcbd 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000bee:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000bfa:	bf00      	nop
 8000bfc:	f7ff fca8 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0f8      	beq.n	8000bfc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	50004300 	.word	0x50004300

08000c10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000c10:	b5b0      	push	{r4, r5, r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000c14:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1e:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c20:	4d0d      	ldr	r5, [pc, #52]	; (8000c58 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000c2a:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000c2e:	f003 feef 	bl	8004a10 <OSCHP_GetFrequency>
 8000c32:	4602      	mov	r2, r0
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000c36:	fba3 2302 	umull	r2, r3, r3, r2
 8000c3a:	0d1b      	lsrs	r3, r3, #20
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c40:	4323      	orrs	r3, r4
 8000c42:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000c44:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c46:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c4e:	6053      	str	r3, [r2, #4]
}
 8000c50:	bdb0      	pop	{r4, r5, r7, pc}
 8000c52:	bf00      	nop
 8000c54:	50004710 	.word	0x50004710
 8000c58:	50004700 	.word	0x50004700
 8000c5c:	6b5fca6b 	.word	0x6b5fca6b

08000c60 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000c6c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000c70:	bf0c      	ite	eq
 8000c72:	2301      	moveq	r3, #1
 8000c74:	2300      	movne	r3, #0
 8000c76:	b2db      	uxtb	r3, r3
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	50004710 	.word	0x50004710

08000c88 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c8c:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c96:	f023 0302 	bic.w	r3, r3, #2
 8000c9a:	6053      	str	r3, [r2, #4]
}
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	50004710 	.word	0x50004710

08000ca8 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000cac:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	6053      	str	r3, [r2, #4]
}
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	50004710 	.word	0x50004710

08000cc8 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60ba      	str	r2, [r7, #8]
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	81fb      	strh	r3, [r7, #14]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000cda:	89fb      	ldrh	r3, [r7, #14]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fd59 	bl	8000794 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000ce2:	7b7b      	ldrb	r3, [r7, #13]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	f040 808b 	bne.w	8000e00 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000cea:	89fb      	ldrh	r3, [r7, #14]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d109      	bne.n	8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000cf0:	f003 fe8e 	bl	8004a10 <OSCHP_GetFrequency>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	4b54      	ldr	r3, [pc, #336]	; (8000e48 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000cf8:	fba3 2302 	umull	r2, r3, r3, r2
 8000cfc:	0c9b      	lsrs	r3, r3, #18
 8000cfe:	059b      	lsls	r3, r3, #22
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	e002      	b.n	8000d0a <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000d04:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000d08:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	fb02 f203 	mul.w	r2, r2, r3
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d18:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	4a4b      	ldr	r2, [pc, #300]	; (8000e4c <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d22:	091b      	lsrs	r3, r3, #4
 8000d24:	0d9b      	lsrs	r3, r3, #22
 8000d26:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d28:	4a49      	ldr	r2, [pc, #292]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d2a:	4b49      	ldr	r3, [pc, #292]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d34:	bf00      	nop
 8000d36:	4b46      	ldr	r3, [pc, #280]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f9      	beq.n	8000d36 <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d42:	4a43      	ldr	r2, [pc, #268]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d44:	4b42      	ldr	r3, [pc, #264]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f043 0310 	orr.w	r3, r3, #16
 8000d4c:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d4e:	4940      	ldr	r1, [pc, #256]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d50:	4b3f      	ldr	r3, [pc, #252]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	4b3f      	ldr	r3, [pc, #252]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000d56:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	3a01      	subs	r2, #1
 8000d5c:	0212      	lsls	r2, r2, #8
 8000d5e:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d66:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000d72:	4a37      	ldr	r2, [pc, #220]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7c:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d7e:	4a34      	ldr	r2, [pc, #208]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d80:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f023 0310 	bic.w	r3, r3, #16
 8000d88:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000d8a:	4a31      	ldr	r2, [pc, #196]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d8c:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d94:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d96:	bf00      	nop
 8000d98:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0f9      	beq.n	8000d98 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000da4:	4a2a      	ldr	r2, [pc, #168]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000da6:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f023 0301 	bic.w	r3, r3, #1
 8000dae:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000db0:	bf00      	nop
 8000db2:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f9      	bne.n	8000db2 <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	4a25      	ldr	r2, [pc, #148]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	0d9b      	lsrs	r3, r3, #22
 8000dca:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dcc:	6a3a      	ldr	r2, [r7, #32]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d202      	bcs.n	8000dda <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000dd4:	6938      	ldr	r0, [r7, #16]
 8000dd6:	f000 f845 	bl	8000e64 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	085b      	lsrs	r3, r3, #1
 8000dde:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000de0:	fba2 2303 	umull	r2, r3, r2, r3
 8000de4:	095b      	lsrs	r3, r3, #5
 8000de6:	0d9b      	lsrs	r3, r3, #22
 8000de8:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dea:	6a3a      	ldr	r2, [r7, #32]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d202      	bcs.n	8000df8 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000df2:	6938      	ldr	r0, [r7, #16]
 8000df4:	f000 f836 	bl	8000e64 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000df8:	6a38      	ldr	r0, [r7, #32]
 8000dfa:	f000 f833 	bl	8000e64 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000dfe:	e01c      	b.n	8000e3a <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e00:	4913      	ldr	r1, [pc, #76]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000e12:	bf00      	nop
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d0f9      	beq.n	8000e14 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000e2c:	bf00      	nop
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f9      	beq.n	8000e2e <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000e3c:	2205      	movs	r2, #5
 8000e3e:	60da      	str	r2, [r3, #12]
}
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	431bde83 	.word	0x431bde83
 8000e4c:	aaaaaaab 	.word	0xaaaaaaab
 8000e50:	50004710 	.word	0x50004710
 8000e54:	f08080ff 	.word	0xf08080ff
 8000e58:	88888889 	.word	0x88888889
 8000e5c:	b60b60b7 	.word	0xb60b60b7
 8000e60:	50004160 	.word	0x50004160

08000e64 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e6c:	490b      	ldr	r1, [pc, #44]	; (8000e9c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000e80:	bf00      	nop
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0320 	and.w	r3, r3, #32
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f9      	beq.n	8000e82 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000e8e:	2032      	movs	r0, #50	; 0x32
 8000e90:	f7ff fb3c 	bl	800050c <XMC_SCU_lDelay>
}
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	50004710 	.word	0x50004710

08000ea0 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eae:	60da      	str	r2, [r3, #12]
}
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <XMC_CCU4_lDeassertReset+0x2c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d103      	bne.n	8000ed4 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000ecc:	2004      	movs	r0, #4
 8000ece:	f7ff fbd5 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
 8000ed2:	e006      	b.n	8000ee2 <XMC_CCU4_lDeassertReset+0x26>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <XMC_CCU4_lDeassertReset+0x30>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d102      	bne.n	8000ee2 <XMC_CCU4_lDeassertReset+0x26>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000edc:	2008      	movs	r0, #8
 8000ede:	f7ff fbcd 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	4000c000 	.word	0x4000c000
 8000eec:	40010000 	.word	0x40010000

08000ef0 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <XMC_CCU4_lUngateClock+0x2c>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d103      	bne.n	8000f08 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8000f00:	2004      	movs	r0, #4
 8000f02:	f7ff fd3f 	bl	8000984 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000f06:	e006      	b.n	8000f16 <XMC_CCU4_lUngateClock+0x26>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <XMC_CCU4_lUngateClock+0x30>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d102      	bne.n	8000f16 <XMC_CCU4_lUngateClock+0x26>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8000f10:	2008      	movs	r0, #8
 8000f12:	f7ff fd37 	bl	8000984 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	4000c000 	.word	0x4000c000
 8000f20:	40010000 	.word	0x40010000

08000f24 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000f2c:	2010      	movs	r0, #16
 8000f2e:	f7ff fd19 	bl	8000964 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffdc 	bl	8000ef0 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff ffbf 	bl	8000ebc <XMC_CCU4_lDeassertReset>
#endif
}
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ffe7 	bl	8000f24 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffa2 	bl	8000ea0 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f68:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000f6a:	78fb      	ldrb	r3, [r7, #3]
 8000f6c:	039b      	lsls	r3, r3, #14
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	601a      	str	r2, [r3, #0]
}
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	70fb      	strb	r3, [r7, #3]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4619      	mov	r1, r3
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	408b      	lsls	r3, r1
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	401a      	ands	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000faa:	78bb      	ldrb	r3, [r7, #2]
 8000fac:	78f9      	ldrb	r1, [r7, #3]
 8000fae:	0049      	lsls	r1, r1, #1
 8000fb0:	408b      	lsls	r3, r1
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <XMC_SPI_CH_InitEx>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config, bool init_brg)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_Enable(channel);
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f000 f872 	bl	80010bc <XMC_USIC_CH_Enable>

  if ((config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER) && init_brg)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	795b      	ldrb	r3, [r3, #5]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d115      	bne.n	800100c <XMC_SPI_CH_InitEx+0x48>
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d012      	beq.n	800100c <XMC_SPI_CH_InitEx+0x48>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	791b      	ldrb	r3, [r3, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d007      	beq.n	8000ffe <XMC_SPI_CH_InitEx+0x3a>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	f000 f90c 	bl	8001214 <XMC_USIC_CH_SetBaudrateEx>
 8000ffc:	e006      	b.n	800100c <XMC_SPI_CH_InitEx+0x48>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	4619      	mov	r1, r3
 8001006:	2202      	movs	r2, #2
 8001008:	f000 f892 	bl	8001130 <XMC_USIC_CH_SetBaudrate>
  }

  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4a0f      	ldr	r2, [pc, #60]	; (800104c <XMC_SPI_CH_InitEx+0x88>)
 8001010:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8001018:	639a      	str	r2, [r3, #56]	; 0x38
                             (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	795b      	ldrb	r3, [r3, #5]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d107      	bne.n	8001032 <XMC_SPI_CH_InitEx+0x6e>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                                      USIC_CH_PCR_SSCMode_SELCTR_Msk |
                                      (uint32_t)config->selo_inversion |
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	799b      	ldrb	r3, [r3, #6]
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 8001026:	f043 030b 	orr.w	r3, r3, #11
 800102a:	b2db      	uxtb	r3, r3
 800102c:	461a      	mov	r2, r3
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	63da      	str	r2, [r3, #60]	; 0x3c
                                      (uint32_t)config->selo_inversion |
                                      USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	891b      	ldrh	r3, [r3, #8]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	073f0102 	.word	0x073f0102

08001050 <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800105e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d103      	bne.n	800106e <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800106a:	81fb      	strh	r3, [r7, #14]
 800106c:	e003      	b.n	8001076 <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001074:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8001076:	89fb      	ldrh	r3, [r7, #14]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <XMC_SPI_CH_DisableEvent>:
  channel->CCR |= (event & 0x1fc00U);
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
}

void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event & 0x1fc00U);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8001098:	43db      	mvns	r3, r3
 800109a:	401a      	ands	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	035b      	lsls	r3, r3, #13
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	401a      	ands	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <XMC_USIC_CH_Enable+0x5c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d003      	beq.n	80010d4 <XMC_USIC_CH_Enable+0x18>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a13      	ldr	r2, [pc, #76]	; (800111c <XMC_USIC_CH_Enable+0x60>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d103      	bne.n	80010dc <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 80010d4:	4812      	ldr	r0, [pc, #72]	; (8001120 <XMC_USIC_CH_Enable+0x64>)
 80010d6:	f000 f9df 	bl	8001498 <XMC_USIC_Enable>
 80010da:	e00a      	b.n	80010f2 <XMC_USIC_CH_Enable+0x36>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a11      	ldr	r2, [pc, #68]	; (8001124 <XMC_USIC_CH_Enable+0x68>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d003      	beq.n	80010ec <XMC_USIC_CH_Enable+0x30>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <XMC_USIC_CH_Enable+0x6c>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d102      	bne.n	80010f2 <XMC_USIC_CH_Enable+0x36>
  {
    XMC_USIC_Enable(XMC_USIC1);
 80010ec:	480f      	ldr	r0, [pc, #60]	; (800112c <XMC_USIC_CH_Enable+0x70>)
 80010ee:	f000 f9d3 	bl	8001498 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2203      	movs	r2, #3
 80010f6:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 80010f8:	bf00      	nop
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f9      	beq.n	80010fa <XMC_USIC_CH_Enable+0x3e>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f023 020f 	bic.w	r2, r3, #15
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40030000 	.word	0x40030000
 800111c:	40030200 	.word	0x40030200
 8001120:	40030008 	.word	0x40030008
 8001124:	48020000 	.word	0x48020000
 8001128:	48020200 	.word	0x48020200
 800112c:	48020008 	.word	0x48020008

08001130 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08e      	sub	sp, #56	; 0x38
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	2b63      	cmp	r3, #99	; 0x63
 8001140:	d95a      	bls.n	80011f8 <XMC_USIC_CH_SetBaudrate+0xc8>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d057      	beq.n	80011f8 <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001148:	f7ff fad8 	bl	80006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 800114c:	4602      	mov	r2, r0
 800114e:	4b2f      	ldr	r3, [pc, #188]	; (800120c <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001150:	fba3 2302 	umull	r2, r3, r3, r2
 8001154:	095b      	lsrs	r3, r3, #5
 8001156:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	4a2c      	ldr	r2, [pc, #176]	; (800120c <XMC_USIC_CH_SetBaudrate+0xdc>)
 800115c:	fba2 2303 	umull	r2, r3, r2, r3
 8001160:	095b      	lsrs	r3, r3, #5
 8001162:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 8001164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 800116a:	2301      	movs	r3, #1
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 800116e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001172:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8001174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001178:	633b      	str	r3, [r7, #48]	; 0x30
 800117a:	e022      	b.n	80011c2 <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 800117c:	6a3b      	ldr	r3, [r7, #32]
 800117e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001180:	fb02 f203 	mul.w	r2, r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	fb01 f303 	mul.w	r3, r1, r3
 800118c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001190:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	0a9b      	lsrs	r3, r3, #10
 8001196:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800119e:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a6:	d809      	bhi.n	80011bc <XMC_USIC_CH_SetBaudrate+0x8c>
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d205      	bcs.n	80011bc <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 80011b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 80011bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011be:	3b01      	subs	r3, #1
 80011c0:	633b      	str	r3, [r7, #48]	; 0x30
 80011c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1d9      	bne.n	800117c <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 80011c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ca:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 80011cc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	695a      	ldr	r2, [r3, #20]
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <XMC_USIC_CH_SetBaudrate+0xe0>)
 80011da:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	3a01      	subs	r2, #1
 80011e0:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80011e2:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 80011e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e6:	3b01      	subs	r3, #1
 80011e8:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80011ea:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80011f6:	e002      	b.n	80011fe <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 80011fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001202:	4618      	mov	r0, r3
 8001204:	3738      	adds	r7, #56	; 0x38
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	51eb851f 	.word	0x51eb851f
 8001210:	fc0080ef 	.word	0xfc0080ef

08001214 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	; 0x30
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8001220:	f7ff fa6c 	bl	80006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001224:	4603      	mov	r3, r0
 8001226:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 8001232:	2301      	movs	r3, #1
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 8001236:	6a3a      	ldr	r2, [r7, #32]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	429a      	cmp	r2, r3
 800123c:	dd5f      	ble.n	80012fe <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 800123e:	6a3a      	ldr	r2, [r7, #32]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	fb92 f3f3 	sdiv	r3, r2, r3
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 8001248:	e010      	b.n	800126c <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 800124a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124c:	3301      	adds	r3, #1
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	fb02 f303 	mul.w	r3, r2, r3
 8001258:	461a      	mov	r2, r3
 800125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125c:	fb03 f302 	mul.w	r3, r3, r2
 8001260:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001262:	6a3a      	ldr	r2, [r7, #32]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	fb92 f3f3 	sdiv	r3, r2, r3
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 800126c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001272:	4293      	cmp	r3, r2
 8001274:	d8e9      	bhi.n	800124a <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 8001276:	6a3a      	ldr	r2, [r7, #32]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800127c:	fb01 f303 	mul.w	r3, r1, r3
 8001280:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001282:	fb01 f303 	mul.w	r3, r1, r3
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 800128c:	6a3a      	ldr	r2, [r7, #32]
 800128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001290:	3301      	adds	r3, #1
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	fb01 f303 	mul.w	r3, r1, r3
 8001298:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800129a:	fb01 f303 	mul.w	r3, r1, r3
 800129e:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a2:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012ae:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012b2:	68b9      	ldr	r1, [r7, #8]
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	1acb      	subs	r3, r1, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bfb8      	it	lt
 80012bc:	425b      	neglt	r3, r3
 80012be:	429a      	cmp	r2, r3
 80012c0:	da02      	bge.n	80012c8 <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 80012c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c4:	3301      	adds	r3, #1
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 80012c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ca:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 80012d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 80012e0:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	3a01      	subs	r2, #1
 80012e6:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80012e8:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 80012ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ec:	3b01      	subs	r3, #1
 80012ee:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80012f0:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012fc:	e002      	b.n	8001304 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 8001304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001308:	4618      	mov	r0, r3
 800130a:	3730      	adds	r7, #48	; 0x30
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	fc0080ef 	.word	0xfc0080ef

08001314 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	4613      	mov	r3, r2
 8001322:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800132a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 800133c:	4013      	ands	r3, r2
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	0211      	lsls	r1, r2, #8
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	4311      	orrs	r1, r2
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8001346:	79fa      	ldrb	r2, [r7, #7]
 8001348:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800134a:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
 800134c:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	f8ffc0c0 	.word	0xf8ffc0c0

08001364 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	4613      	mov	r3, r2
 8001372:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800137a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 800138c:	4013      	ands	r3, r2
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	0211      	lsls	r1, r2, #8
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	4311      	orrs	r1, r2
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8001396:	79fa      	ldrb	r2, [r7, #7]
 8001398:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 800139a:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 800139c:	4313      	orrs	r3, r2
 800139e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	efffc0c0 	.word	0xefffc0c0

080013b8 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	460b      	mov	r3, r1
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	72fb      	strb	r3, [r7, #11]
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80013cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	021b      	lsls	r3, r3, #8
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 80013d4:	431a      	orrs	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
}
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop

080013e8 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	460b      	mov	r3, r1
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	699a      	ldr	r2, [r3, #24]
 80013fa:	7afb      	ldrb	r3, [r7, #11]
 80013fc:	2107      	movs	r1, #7
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
 8001406:	7afb      	ldrb	r3, [r7, #11]
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800140e:	431a      	orrs	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop

08001420 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	460b      	mov	r3, r1
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001434:	7afb      	ldrb	r3, [r7, #11]
 8001436:	2107      	movs	r1, #7
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
 8001440:	7afb      	ldrb	r3, [r7, #11]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001448:	431a      	orrs	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              (service_request << (uint32_t)interrupt_node));
}
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop

0800145c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	460b      	mov	r3, r1
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	2107      	movs	r1, #7
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
 800147c:	7afb      	ldrb	r3, [r7, #11]
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001484:	431a      	orrs	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                              (service_request << (uint32_t)interrupt_node));
}
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop

08001498 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a1b      	ldr	r2, [pc, #108]	; (8001510 <XMC_USIC_Enable+0x78>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d118      	bne.n	80014da <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 80014a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014ac:	f7ff fa6a 	bl	8000984 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 80014b0:	bf00      	nop
 80014b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014b6:	f7ff fa81 	bl	80009bc <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f8      	bne.n	80014b2 <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 80014c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014c4:	f7ff f8da 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 80014c8:	bf00      	nop
 80014ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014ce:	f7ff f8f1 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f8      	bne.n	80014ca <XMC_USIC_Enable+0x32>
 80014d8:	e017      	b.n	800150a <XMC_USIC_Enable+0x72>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <XMC_USIC_Enable+0x7c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d113      	bne.n	800150a <XMC_USIC_Enable+0x72>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <XMC_USIC_Enable+0x80>)
 80014e4:	f7ff fa4e 	bl	8000984 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 80014e8:	bf00      	nop
 80014ea:	480b      	ldr	r0, [pc, #44]	; (8001518 <XMC_USIC_Enable+0x80>)
 80014ec:	f7ff fa66 	bl	80009bc <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f9      	bne.n	80014ea <XMC_USIC_Enable+0x52>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 80014f6:	4808      	ldr	r0, [pc, #32]	; (8001518 <XMC_USIC_Enable+0x80>)
 80014f8:	f7ff f8c0 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 80014fc:	bf00      	nop
 80014fe:	4806      	ldr	r0, [pc, #24]	; (8001518 <XMC_USIC_Enable+0x80>)
 8001500:	f7ff f8d8 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f9      	bne.n	80014fe <XMC_USIC_Enable+0x66>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40030008 	.word	0x40030008
 8001514:	48020008 	.word	0x48020008
 8001518:	10000080 	.word	0x10000080

0800151c <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <_sbrk+0x5c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <_sbrk+0x5c>)
 800152e:	4a13      	ldr	r2, [pc, #76]	; (800157c <_sbrk+0x60>)
 8001530:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <_sbrk+0x5c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3303      	adds	r3, #3
 800153c:	f023 0303 	bic.w	r3, r3, #3
 8001540:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <_sbrk+0x5c>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <_sbrk+0x64>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d207      	bcs.n	8001560 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <_sbrk+0x5c>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4413      	add	r3, r2
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <_sbrk+0x5c>)
 800155a:	6013      	str	r3, [r2, #0]
    return (base);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	e006      	b.n	800156e <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8001560:	f003 fc8a 	bl	8004e78 <__errno>
 8001564:	4602      	mov	r2, r0
 8001566:	230c      	movs	r3, #12
 8001568:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	1fff08cc 	.word	0x1fff08cc
 800157c:	20000000 	.word	0x20000000
 8001580:	2000ffc0 	.word	0x2000ffc0

08001584 <_init>:

/* Init */
void _init(void)
{}
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <XMC_USIC_CH_WriteToTBUFTCI>:
 * XMC_USIC_CH_WriteToTBUF() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
    const uint16_t data,
    const uint32_t transmit_control_information)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	460b      	mov	r3, r1
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	817b      	strh	r3, [r7, #10]
  channel->TBUF[transmit_control_information] = data;
 800159e:	8979      	ldrh	r1, [r7, #10]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	3220      	adds	r2, #32
 80015a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	401a      	ands	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop

080015f8 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800160a:	b2db      	uxtb	r3, r3
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001624:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001644:	409a      	lsls	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	669a      	str	r2, [r3, #104]	; 0x68
}
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	43db      	mvns	r3, r3
 800168c:	401a      	ands	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop

080016a0 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>:
 * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
    const uint16_t data,
    const uint32_t frame_length)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	460b      	mov	r3, r1
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	817b      	strh	r3, [r7, #10]
  channel->IN[frame_length] = data;
 80016ae:	8979      	ldrh	r1, [r7, #10]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	3260      	adds	r2, #96	; 0x60
 80016b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <XMC_USIC_CH_TXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016d2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80016ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	bf14      	ite	ne
 80016f6:	2301      	movne	r3, #1
 80016f8:	2300      	moveq	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800171a:	2b00      	cmp	r3, #0
 800171c:	bf14      	ite	ne
 800171e:	2301      	movne	r3, #1
 8001720:	2300      	moveq	r3, #0
 8001722:	b2db      	uxtb	r3, r3
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	43db      	mvns	r3, r3
 8001768:	401a      	ands	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop

0800177c <XMC_USIC_CH_RXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800178a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf14      	ite	ne
 80017ae:	2301      	movne	r3, #1
 80017b0:	2300      	moveq	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <XMC_SPI_CH_SetTransmitMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	019b      	lsls	r3, r3, #6
 80017d8:	b2db      	uxtb	r3, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	641a      	str	r2, [r3, #64]	; 0x40
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop

080017ec <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4798      	blx	r3
 80017fc:	4603      	mov	r3, r0
 80017fe:	73fb      	strb	r3, [r7, #15]

  return status;
 8001800:	7bfb      	ldrb	r3, [r7, #15]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop

0800180c <SPI_MASTER_Transmit>:

  return status;
}

SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;
 8001818:	2301      	movs	r3, #1
 800181a:	75fb      	strb	r3, [r7, #23]

#if (SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001824:	2b00      	cmp	r3, #0
 8001826:	d106      	bne.n	8001836 <SPI_MASTER_Transmit+0x2a>
  {
    status = SPI_MASTER_StartTransmitIRQ(handle, dataptr, count);
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	68b9      	ldr	r1, [r7, #8]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	f000 f807 	bl	8001840 <SPI_MASTER_StartTransmitIRQ>
 8001832:	4603      	mov	r3, r0
 8001834:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartTransmitPolling(handle, dataptr, count);
  }
#endif

  return status;
 8001836:	7dfb      	ldrb	r3, [r7, #23]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <SPI_MASTER_StartTransmitIRQ>:
#if (SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
/*
 * Transmit the number of data words specified.
 */
SPI_MASTER_STATUS_t SPI_MASTER_StartTransmitIRQ(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.
 800184c:	2301      	movs	r3, #1
 800184e:	61bb      	str	r3, [r7, #24]
                                                           Specify the number of bytes for the configured word length */
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_StartTransmitIRQ:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 8001850:	2304      	movs	r3, #4
 8001852:	77fb      	strb	r3, [r7, #31]
  runtime_handle = handle->runtime;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	617b      	str	r3, [r7, #20]

  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001862:	2b00      	cmp	r3, #0
 8001864:	d15c      	bne.n	8001920 <SPI_MASTER_StartTransmitIRQ+0xe0>
  {
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d057      	beq.n	800191c <SPI_MASTER_StartTransmitIRQ+0xdc>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d054      	beq.n	800191c <SPI_MASTER_StartTransmitIRQ+0xdc>
    {
      status = SPI_MASTER_STATUS_BUSY;
 8001872:	2302      	movs	r3, #2
 8001874:	77fb      	strb	r3, [r7, #31]
      /*Check data pointer is valid or not*/
      if (false == runtime_handle->tx_busy)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f893 3020 	ldrb.w	r3, [r3, #32]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	f083 0301 	eor.w	r3, r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d048      	beq.n	800191a <SPI_MASTER_StartTransmitIRQ+0xda>
      {
        if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b08      	cmp	r3, #8
 8001890:	d901      	bls.n	8001896 <SPI_MASTER_StartTransmitIRQ+0x56>
        {
          bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
        }

        /* Obtain the address of data, size of data */
        runtime_handle->tx_data = dataptr;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	3b01      	subs	r3, #1
 80018a0:	461a      	mov	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	fa03 f202 	lsl.w	r2, r3, r2
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	605a      	str	r2, [r3, #4]
        /* Initialize to first index and set the busy flag */
        runtime_handle->tx_data_index = 0U;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
        runtime_handle->tx_busy = true;
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2020 	strb.w	r2, [r3, #32]

        /* Enable the transmit buffer event */
        if ((uint32_t)handle->config->tx_fifo_size > 0U)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00c      	beq.n	80018e0 <SPI_MASTER_StartTransmitIRQ+0xa0>
        {
          /* Flush the Transmit FIFO */
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fefa 	bl	80016c4 <XMC_USIC_CH_TXFIFO_Flush>
          XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018da:	f7ff febb 	bl	8001654 <XMC_USIC_CH_TXFIFO_EnableEvent>
 80018de:	e006      	b.n	80018ee <SPI_MASTER_StartTransmitIRQ+0xae>
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ea:	f7ff fe63 	bl	80015b4 <XMC_USIC_CH_EnableEvent>
        }
        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	7f1b      	ldrb	r3, [r3, #28]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff ff60 	bl	80017c0 <XMC_SPI_CH_SetTransmitMode>
        status = SPI_MASTER_STATUS_SUCCESS;
 8001900:	2300      	movs	r3, #0
 8001902:	77fb      	strb	r3, [r7, #31]

        /* Trigger the transmit buffer interrupt */
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff fe8e 	bl	8001634 <XMC_USIC_CH_TriggerServiceRequest>
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
    {
      status = SPI_MASTER_STATUS_BUSY;
      /*Check data pointer is valid or not*/
      if (false == runtime_handle->tx_busy)
 8001918:	e002      	b.n	8001920 <SPI_MASTER_StartTransmitIRQ+0xe0>
 800191a:	e001      	b.n	8001920 <SPI_MASTER_StartTransmitIRQ+0xe0>
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
 800191c:	2303      	movs	r3, #3
 800191e:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8001920:	7ffb      	ldrb	r3, [r7, #31]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3720      	adds	r7, #32
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop

0800192c <SPI_MASTER_Transfer>:
 */
SPI_MASTER_STATUS_t SPI_MASTER_Transfer(const SPI_MASTER_t *const handle,
                                        uint8_t* tx_dataptr,
                                        uint8_t* rx_dataptr,
                                        uint32_t count)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_Transfer:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_BUSY;
 800193a:	2302      	movs	r3, #2
 800193c:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	613b      	str	r3, [r7, #16]

  if (XMC_SPI_CH_MODE_STANDARD == runtime_handle->spi_master_mode)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	7f1b      	ldrb	r3, [r3, #28]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d13f      	bne.n	80019ce <SPI_MASTER_Transfer+0xa2>
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d038      	beq.n	80019c6 <SPI_MASTER_Transfer+0x9a>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d035      	beq.n	80019c6 <SPI_MASTER_Transfer+0x9a>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d032      	beq.n	80019c6 <SPI_MASTER_Transfer+0x9a>
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	7fdb      	ldrb	r3, [r3, #31]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f083 0301 	eor.w	r3, r3, #1
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d029      	beq.n	80019c4 <SPI_MASTER_Transfer+0x98>
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f083 0301 	eor.w	r3, r3, #1
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d020      	beq.n	80019c4 <SPI_MASTER_Transfer+0x98>
      {
        runtime_handle->rx_busy = true;
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	2201      	movs	r2, #1
 8001986:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = rx_dataptr;
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = tx_dataptr;
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = count;
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = false;
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        runtime_handle->rx_data_dummy = false;
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

#if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)
        if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d106      	bne.n	80019c4 <SPI_MASTER_Transfer+0x98>
        {
          status = SPI_MASTER_lReceiveIRQ(handle, count);
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	6839      	ldr	r1, [r7, #0]
 80019ba:	f000 f8f3 	bl	8001ba4 <SPI_MASTER_lReceiveIRQ>
 80019be:	4603      	mov	r3, r0
 80019c0:	75fb      	strb	r3, [r7, #23]
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 80019c2:	e003      	b.n	80019cc <SPI_MASTER_Transfer+0xa0>
 80019c4:	e002      	b.n	80019cc <SPI_MASTER_Transfer+0xa0>
#endif
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
 80019c6:	2303      	movs	r3, #3
 80019c8:	75fb      	strb	r3, [r7, #23]
 80019ca:	e002      	b.n	80019d2 <SPI_MASTER_Transfer+0xa6>
 80019cc:	e001      	b.n	80019d2 <SPI_MASTER_Transfer+0xa6>
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_FAILURE;
 80019ce:	2301      	movs	r3, #1
 80019d0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80019d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <SPI_MASTER_lTransmitHandler>:
 * Transmit interrupt handler for the APP.
 * This is a common interrupt handling function called for different instances of the APP.
 *
 */
void SPI_MASTER_lTransmitHandler(const SPI_MASTER_t * const handle)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.*/
 80019e4:	2301      	movs	r3, #1
 80019e6:	613b      	str	r3, [r7, #16]
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	60fb      	str	r3, [r7, #12]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d901      	bls.n	80019fc <SPI_MASTER_lTransmitHandler+0x20>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 80019f8:	2302      	movs	r3, #2
 80019fa:	613b      	str	r3, [r7, #16]
  }

  if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f080 808b 	bcs.w	8001b20 <SPI_MASTER_lTransmitHandler+0x144>
  {
    data = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	82fb      	strh	r3, [r7, #22]
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d04b      	beq.n	8001ab2 <SPI_MASTER_lTransmitHandler+0xd6>
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8001a1a:	e03e      	b.n	8001a9a <SPI_MASTER_lTransmitHandler+0xbe>
      {
        if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d236      	bcs.n	8001a96 <SPI_MASTER_lTransmitHandler+0xba>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          if (runtime_handle->tx_data_dummy == true)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00b      	beq.n	8001a4c <SPI_MASTER_lTransmitHandler+0x70>
          {
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	7f1b      	ldrb	r3, [r3, #28]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	4610      	mov	r0, r2
 8001a40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a44:	461a      	mov	r2, r3
 8001a46:	f7ff fe2b 	bl	80016a0 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 8001a4a:	e01d      	b.n	8001a88 <SPI_MASTER_lTransmitHandler+0xac>
          }
          else
          {
            if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d107      	bne.n	8001a62 <SPI_MASTER_lTransmitHandler+0x86>
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	82fb      	strh	r3, [r7, #22]
 8001a60:	e006      	b.n	8001a70 <SPI_MASTER_lTransmitHandler+0x94>
            }
            else
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	699a      	ldr	r2, [r3, #24]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	82fb      	strh	r3, [r7, #22]
            }
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	7f1b      	ldrb	r3, [r3, #28]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461c      	mov	r4, r3
 8001a7c:	8afb      	ldrh	r3, [r7, #22]
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	4622      	mov	r2, r4
 8001a84:	f7ff fe0c 	bl	80016a0 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
          }
          (runtime_handle->tx_data_index)+= bytes_per_word;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	441a      	add	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	e001      	b.n	8001a9a <SPI_MASTER_lTransmitHandler+0xbe>
        }
        else
        {
          break;
 8001a96:	bf00      	nop
 8001a98:	e080      	b.n	8001b9c <SPI_MASTER_lTransmitHandler+0x1c0>
    data = 0U;
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fe1e 	bl	80016e0 <XMC_USIC_CH_TXFIFO_IsFull>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f083 0301 	eor.w	r3, r3, #1
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1b5      	bne.n	8001a1c <SPI_MASTER_lTransmitHandler+0x40>
 8001ab0:	e074      	b.n	8001b9c <SPI_MASTER_lTransmitHandler+0x1c0>
        }
      }
    }
    else/*When Transmit FIFO is disabled*/
    {
      if (runtime_handle->tx_data_dummy == true)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00b      	beq.n	8001ad6 <SPI_MASTER_lTransmitHandler+0xfa>
      {
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	7f1b      	ldrb	r3, [r3, #28]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	4610      	mov	r0, r2
 8001aca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f7ff fd5e 	bl	8001590 <XMC_USIC_CH_WriteToTBUFTCI>
 8001ad4:	e01d      	b.n	8001b12 <SPI_MASTER_lTransmitHandler+0x136>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d107      	bne.n	8001aec <SPI_MASTER_lTransmitHandler+0x110>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	699a      	ldr	r2, [r3, #24]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	82fb      	strh	r3, [r7, #22]
 8001aea:	e006      	b.n	8001afa <SPI_MASTER_lTransmitHandler+0x11e>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	699a      	ldr	r2, [r3, #24]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4413      	add	r3, r2
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	82fb      	strh	r3, [r7, #22]
        }
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	7f1b      	ldrb	r3, [r3, #28]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	461c      	mov	r4, r3
 8001b06:	8afb      	ldrh	r3, [r7, #22]
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4622      	mov	r2, r4
 8001b0e:	f7ff fd3f 	bl	8001590 <XMC_USIC_CH_WriteToTBUFTCI>
      }
      (runtime_handle->tx_data_index)+= bytes_per_word;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	441a      	add	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	e03d      	b.n	8001b9c <SPI_MASTER_lTransmitHandler+0x1c0>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fdef 	bl	8001708 <XMC_USIC_CH_TXFIFO_IsEmpty>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d035      	beq.n	8001b9c <SPI_MASTER_lTransmitHandler+0x1c0>
    {
      /* Clear the flag */
      if ((uint32_t)handle->config->tx_fifo_size > 0U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d007      	beq.n	8001b4c <SPI_MASTER_lTransmitHandler+0x170>
      {
        /* Clear the transmit FIFO event */
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b46:	f7ff fd97 	bl	8001678 <XMC_USIC_CH_TXFIFO_DisableEvent>
 8001b4a:	e006      	b.n	8001b5a <SPI_MASTER_lTransmitHandler+0x17e>
      }
      else
      {
        /* Clear the standard transmit event */
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b56:	f7ff fd3d 	bl	80015d4 <XMC_USIC_CH_DisableEvent>
      }

      /* Wait for the transmit buffer to be free to ensure that all data is transmitted */
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001b5a:	bf00      	nop
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fd49 	bl	80015f8 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b80      	cmp	r3, #128	; 0x80
 8001b6a:	d0f7      	beq.n	8001b5c <SPI_MASTER_lTransmitHandler+0x180>
      {

      }

      /* All data is transmitted */
      runtime_handle->tx_busy = false;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2020 	strb.w	r2, [r3, #32]
      runtime_handle->tx_data = NULL;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]

      if ((handle->config->tx_cbhandler != NULL) && (runtime_handle->rx_busy == false))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00b      	beq.n	8001b9c <SPI_MASTER_lTransmitHandler+0x1c0>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	7fdb      	ldrb	r3, [r3, #31]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	f083 0301 	eor.w	r3, r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <SPI_MASTER_lTransmitHandler+0x1c0>
      {
        /* Execute the callback function provided in the SPI_MASTER APP UI */
        handle->config->tx_cbhandler();
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9a:	4798      	blx	r3
      }
    }
  }
}
 8001b9c:	371c      	adds	r7, #28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}
 8001ba2:	bf00      	nop

08001ba4 <SPI_MASTER_lReceiveIRQ>:
#endif

#if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)

SPI_MASTER_STATUS_t SPI_MASTER_lReceiveIRQ(const SPI_MASTER_t *const handle, uint32_t count)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]

  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD;; /* This is to support the word length 8 and 16.
 8001bae:	2301      	movs	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
                                                            Specify the number of bytes for the configured word length*/

  runtime_handle = handle->runtime;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	613b      	str	r3, [r7, #16]
  runtime_handle->rx_data_index = 0U;
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d901      	bls.n	8001bcc <SPI_MASTER_lReceiveIRQ+0x28>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8001bc8:	2302      	movs	r3, #2
 8001bca:	617b      	str	r3, [r7, #20]
  }

  /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received */
  runtime_handle->rx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	fa03 f202 	lsl.w	r2, r3, r2
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	60da      	str	r2, [r3, #12]

  /* Check if FIFO is enabled */
  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d017      	beq.n	8001c18 <SPI_MASTER_lReceiveIRQ+0x74>
  {
    /* Clear the receive FIFO */
    XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fdc5 	bl	800177c <XMC_USIC_CH_RXFIFO_Flush>
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f996 	bl	8001f28 <SPI_MASTER_lStdRBUFFlush>

    /* Configure the FIFO trigger limit based on the required data size */
    SPI_MASTER_lReconfigureRxFIFO(handle, runtime_handle->rx_data_count);
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4619      	mov	r1, r3
 8001c04:	f000 f958 	bl	8001eb8 <SPI_MASTER_lReconfigureRxFIFO>

    /* Enable the receive FIFO events */
    XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001c12:	f7ff fd8d 	bl	8001730 <XMC_USIC_CH_RXFIFO_EnableEvent>
 8001c16:	e00b      	b.n	8001c30 <SPI_MASTER_lReceiveIRQ+0x8c>
  }
  else
  {
    /* Flush the RBUF0 and RBUF1 */
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 f983 	bl	8001f28 <SPI_MASTER_lStdRBUFFlush>

    /* Enable the standard receive events */
    XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001c2c:	f7ff fcc2 	bl	80015b4 <XMC_USIC_CH_EnableEvent>
  }
  /* Call the transmit, to receive the data synchronously */
  status = SPI_MASTER_Transmit(handle, runtime_handle->tx_data, runtime_handle->tx_data_count);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	699a      	ldr	r2, [r3, #24]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	f7ff fde5 	bl	800180c <SPI_MASTER_Transmit>
 8001c42:	4603      	mov	r3, r0
 8001c44:	73fb      	strb	r3, [r7, #15]

  return status;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <SPI_MASTER_lReceiveHandler>:
/*
 * Receive interrupt handler for the APP.
 * This is a common interrupt handling function for different instances of the SPI_MASTER APP.
 */
void SPI_MASTER_lReceiveHandler(const SPI_MASTER_t * const handle)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16. */
 8001c58:	2301      	movs	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	613b      	str	r3, [r7, #16]

  data = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	81fb      	strh	r3, [r7, #14]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d901      	bls.n	8001c74 <SPI_MASTER_lReceiveHandler+0x24>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8001c70:	2302      	movs	r3, #2
 8001c72:	617b      	str	r3, [r7, #20]
  }

  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d01d      	beq.n	8001cbc <SPI_MASTER_lReceiveHandler+0x6c>
  {
    /* read the FIFO */
    SPI_MASTER_lFIFORead(handle, bytes_per_word);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	6979      	ldr	r1, [r7, #20]
 8001c84:	f000 f8b6 	bl	8001df4 <SPI_MASTER_lFIFORead>
    /* Reconfigure the RXFIFO trigger limit based on pending receive bytes */
    if ((runtime_handle->rx_data_count - runtime_handle->rx_data_index) <= (1UL << (handle->config->rx_fifo_size - 1)))
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	1ad2      	subs	r2, r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	f200 80a2 	bhi.w	8001dec <SPI_MASTER_lReceiveHandler+0x19c>
    {
      SPI_MASTER_lReconfigureRxFIFO(handle, (uint32_t)(runtime_handle->rx_data_count - runtime_handle->rx_data_index));
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f000 f8ff 	bl	8001eb8 <SPI_MASTER_lReconfigureRxFIFO>
 8001cba:	e097      	b.n	8001dec <SPI_MASTER_lReceiveHandler+0x19c>
    }
  }
  else
  {
    /* When RxFIFO is disabled */
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID0) != 0U )
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fca9 	bl	8001618 <XMC_USIC_CH_GetReceiveBufferStatus>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d028      	beq.n	8001d22 <SPI_MASTER_lReceiveHandler+0xd2>
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d222      	bcs.n	8001d22 <SPI_MASTER_lReceiveHandler+0xd2>
      {
        data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f9b5 	bl	8001050 <XMC_SPI_CH_GetReceivedData>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	81fb      	strh	r3, [r7, #14]

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	89fa      	ldrh	r2, [r7, #14]
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	701a      	strb	r2, [r3, #0]

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d10a      	bne.n	8001d16 <SPI_MASTER_lReceiveHandler+0xc6>
        {
          runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	89fa      	ldrh	r2, [r7, #14]
 8001d0e:	0a12      	lsrs	r2, r2, #8
 8001d10:	b292      	uxth	r2, r2
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]
        }

        (runtime_handle->rx_data_index)+= bytes_per_word;
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	441a      	add	r2, r3
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	611a      	str	r2, [r3, #16]
      }
    }
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) != 0U)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fc76 	bl	8001618 <XMC_USIC_CH_GetReceiveBufferStatus>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d028      	beq.n	8001d88 <SPI_MASTER_lReceiveHandler+0x138>
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d222      	bcs.n	8001d88 <SPI_MASTER_lReceiveHandler+0x138>
      {
        data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff f982 	bl	8001050 <XMC_SPI_CH_GetReceivedData>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	81fb      	strh	r3, [r7, #14]

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	695a      	ldr	r2, [r3, #20]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	4413      	add	r3, r2
 8001d5a:	89fa      	ldrh	r2, [r7, #14]
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	701a      	strb	r2, [r3, #0]

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d10a      	bne.n	8001d7c <SPI_MASTER_lReceiveHandler+0x12c>
        {
          runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	89fa      	ldrh	r2, [r7, #14]
 8001d74:	0a12      	lsrs	r2, r2, #8
 8001d76:	b292      	uxth	r2, r2
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	701a      	strb	r2, [r3, #0]
        }

        (runtime_handle->rx_data_index)+= bytes_per_word;
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	441a      	add	r2, r3
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	611a      	str	r2, [r3, #16]
      }
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d12b      	bne.n	8001dec <SPI_MASTER_lReceiveHandler+0x19c>
    {
      /* Disable both standard receive and alternative receive FIFO events */
      if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <SPI_MASTER_lReceiveHandler+0x160>
      {
        /* Enable the receive FIFO events */
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001daa:	f7ff fcd3 	bl	8001754 <XMC_USIC_CH_RXFIFO_DisableEvent>
 8001dae:	e006      	b.n	8001dbe <SPI_MASTER_lReceiveHandler+0x16e>
      }
      else
      {
        XMC_SPI_CH_DisableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001dba:	f7ff f963 	bl	8001084 <XMC_SPI_CH_DisableEvent>
      }
      /* Reception complete */
      runtime_handle->rx_busy = false;
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	77da      	strb	r2, [r3, #31]
      runtime_handle->tx_data_dummy = false;
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      runtime_handle->rx_data_dummy = true;
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      runtime_handle->rx_data = NULL;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	615a      	str	r2, [r3, #20]

      if (handle->config->rx_cbhandler != NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <SPI_MASTER_lReceiveHandler+0x19c>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dea:	4798      	blx	r3
      }
    }
  }
}
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop

08001df4 <SPI_MASTER_lFIFORead>:

/*
 * Read the data from FIFO until it becomes empty.
 */
void SPI_MASTER_lFIFORead(const SPI_MASTER_t * const handle, const uint32_t bytes_per_word)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint16_t data;

  runtime_handle = handle->runtime;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	60fb      	str	r3, [r7, #12]
  data = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	817b      	strh	r3, [r7, #10]

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8001e08:	e047      	b.n	8001e9a <SPI_MASTER_lFIFORead+0xa6>
  {
    if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d222      	bcs.n	8001e5c <SPI_MASTER_lFIFORead+0x68>
    {
      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff f918 	bl	8001050 <XMC_SPI_CH_GetReceivedData>
 8001e20:	4603      	mov	r3, r0
 8001e22:	817b      	strh	r3, [r7, #10]
      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	695a      	ldr	r2, [r3, #20]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	897a      	ldrh	r2, [r7, #10]
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d10a      	bne.n	8001e50 <SPI_MASTER_lFIFORead+0x5c>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	3301      	adds	r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	897a      	ldrh	r2, [r7, #10]
 8001e48:	0a12      	lsrs	r2, r2, #8
 8001e4a:	b292      	uxth	r2, r2
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	701a      	strb	r2, [r3, #0]
      }
      (runtime_handle->rx_data_index)+= bytes_per_word;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	441a      	add	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d118      	bne.n	8001e9a <SPI_MASTER_lFIFORead+0xa6>
    {
      /*Reception complete*/
      runtime_handle->rx_busy = false;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	77da      	strb	r2, [r3, #31]
      runtime_handle->tx_data_dummy = false;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001e80:	f7ff fc68 	bl	8001754 <XMC_USIC_CH_RXFIFO_DisableEvent>
      if (handle->config->rx_cbhandler != NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d004      	beq.n	8001e98 <SPI_MASTER_lFIFORead+0xa4>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e94:	4798      	blx	r3
      }
      break;
 8001e96:	e00b      	b.n	8001eb0 <SPI_MASTER_lFIFORead+0xbc>
 8001e98:	e00a      	b.n	8001eb0 <SPI_MASTER_lFIFORead+0xbc>

  runtime_handle = handle->runtime;
  data = 0U;

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fc7a 	bl	8001798 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f083 0301 	eor.w	r3, r3, #1
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1ac      	bne.n	8001e0a <SPI_MASTER_lFIFORead+0x16>
        handle->config->rx_cbhandler();
      }
      break;
    }
  }
}
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop

08001eb8 <SPI_MASTER_lReconfigureRxFIFO>:

/*
 * This function configures the FIFO settings
 */
static void SPI_MASTER_lReconfigureRxFIFO(const SPI_MASTER_t * const handle, uint32_t data_size)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val;

  if (((uint32_t)handle->config->rx_fifo_size > 0U) && (data_size > 0U))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d028      	beq.n	8001f20 <SPI_MASTER_lReconfigureRxFIFO+0x68>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d025      	beq.n	8001f20 <SPI_MASTER_lReconfigureRxFIFO+0x68>
  {
	fifo_size = 1UL << (handle->config->rx_fifo_size - 1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001edc:	3b01      	subs	r3, #1
 8001ede:	2201      	movs	r2, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	60bb      	str	r3, [r7, #8]

    if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d902      	bls.n	8001ef6 <SPI_MASTER_lReconfigureRxFIFO+0x3e>
	{
	  /* Data size is divided by 2, to change the trigger limit according the word length */
	  data_size = (uint32_t)data_size >> 1U;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	085b      	lsrs	r3, r3, #1
 8001ef4:	603b      	str	r3, [r7, #0]
	}

	/*If data size is more than FIFO size, configure the limit to the FIFO size*/
	if (data_size <= fifo_size)
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d803      	bhi.n	8001f06 <SPI_MASTER_lReconfigureRxFIFO+0x4e>
	{
	  ret_limit_val = data_size - 1U;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	e001      	b.n	8001f0a <SPI_MASTER_lReconfigureRxFIFO+0x52>
	}
	else
	{
	  ret_limit_val = fifo_size;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	60fb      	str	r3, [r7, #12]
	}

	/*Set the limit value*/
	XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, ret_limit_val);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	f7ff fa4c 	bl	80013b8 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
  }
}
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop

08001f28 <SPI_MASTER_lStdRBUFFlush>:

/*
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff f88d 	bl	8001050 <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff f88a 	bl	8001050 <XMC_SPI_CH_GetReceivedData>
}
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop

08001f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__NVIC_GetPriorityGrouping+0x18>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f50:	0a1b      	lsrs	r3, r3, #8
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	db0b      	blt.n	8001f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f72:	4908      	ldr	r1, [pc, #32]	; (8001f94 <__NVIC_EnableIRQ+0x34>)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	095b      	lsrs	r3, r3, #5
 8001f7a:	79fa      	ldrb	r2, [r7, #7]
 8001f7c:	f002 021f 	and.w	r2, r2, #31
 8001f80:	2001      	movs	r0, #1
 8001f82:	fa00 f202 	lsl.w	r2, r0, r2
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100

08001f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db0a      	blt.n	8001fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fac:	490d      	ldr	r1, [pc, #52]	; (8001fe4 <__NVIC_SetPriority+0x4c>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	0092      	lsls	r2, r2, #2
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001fc0:	e00a      	b.n	8001fd8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc2:	4909      	ldr	r1, [pc, #36]	; (8001fe8 <__NVIC_SetPriority+0x50>)
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	3b04      	subs	r3, #4
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	0092      	lsls	r2, r2, #2
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	761a      	strb	r2, [r3, #24]
  }
}
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000e100 	.word	0xe000e100
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f1c3 0307 	rsb	r3, r3, #7
 8002006:	2b06      	cmp	r3, #6
 8002008:	bf28      	it	cs
 800200a:	2306      	movcs	r3, #6
 800200c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3306      	adds	r3, #6
 8002012:	2b06      	cmp	r3, #6
 8002014:	d902      	bls.n	800201c <NVIC_EncodePriority+0x30>
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3b01      	subs	r3, #1
 800201a:	e000      	b.n	800201e <NVIC_EncodePriority+0x32>
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2201      	movs	r2, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	1e5a      	subs	r2, r3, #1
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	401a      	ands	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2101      	movs	r1, #1
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	1e59      	subs	r1, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002040:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	; 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop

08002050 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	70fb      	strb	r3, [r7, #3]
 800205c:	4613      	mov	r3, r2
 800205e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002060:	78f8      	ldrb	r0, [r7, #3]
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	3306      	adds	r3, #6
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8002072:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002074:	431a      	orrs	r2, r3
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	1d83      	adds	r3, r0, #6
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop

0800208c <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209c:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop

080020b8 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c8:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop

080020e4 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 *
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 80020f8:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
 80020fa:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	615a      	str	r2, [r3, #20]
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop

08002110 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	f023 020f 	bic.w	r2, r3, #15
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop

08002138 <XMC_SPI_CH_Init>:
 * <li>Set polarity for the Slave signal,</li>
 * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 * </ul>
 */
__STATIC_INLINE void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  XMC_SPI_CH_InitEx(channel, config, true);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	6839      	ldr	r1, [r7, #0]
 8002146:	2201      	movs	r2, #1
 8002148:	f7fe ff3c 	bl	8000fc4 <XMC_SPI_CH_InitEx>
}
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop

08002154 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	2101      	movs	r1, #1
 8002160:	f7ff ffd6 	bl	8002110 <XMC_USIC_CH_SetMode>
}
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop

0800216c <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002178:	f043 0201 	orr.w	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop

0800218c <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                   USIC_CH_BRG_PCTQ_Msk)) |
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	615a      	str	r2, [r3, #20]
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <XMC_SPI_CH_DisableFEM>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_EnableFEM()
 */
__STATIC_INLINE void XMC_SPI_CH_DisableFEM(XMC_USIC_CH_t *const channel)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_FEM_Msk;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	f023 0208 	bic.w	r2, r3, #8
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop

080021d8 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	f7ff ff7b 	bl	80020e4 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                        (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	4619      	mov	r1, r3
 8002206:	f7ff ff41 	bl	800208c <XMC_USIC_CH_SetWordLength>
}
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	4619      	mov	r1, r3
 8002222:	f7ff ff49 	bl	80020b8 <XMC_USIC_CH_SetFrameLength>
}
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_INPUT_t input,
    const uint8_t source)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	70fb      	strb	r3, [r7, #3]
 8002238:	4613      	mov	r3, r2
 800223a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 800223c:	78f8      	ldrb	r0, [r7, #3]
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	3306      	adds	r3, #6
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 800224e:	f043 0210 	orr.w	r2, r3, #16
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	1d83      	adds	r3, r0, #6
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 800225c:	78fa      	ldrb	r2, [r7, #3]
 800225e:	78bb      	ldrb	r3, [r7, #2]
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4611      	mov	r1, r2
 8002264:	461a      	mov	r2, r3
 8002266:	f7ff fef3 	bl	8002050 <XMC_USIC_CH_SetInputSource>
}
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <SPI_MASTER_0_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_0_lInit(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 8002276:	2300      	movs	r3, #0
 8002278:	71fb      	strb	r3, [r7, #7]
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI0_CH1, &SPI_MASTER_0_Channel_Config);
 800227a:	483b      	ldr	r0, [pc, #236]	; (8002368 <SPI_MASTER_0_lInit+0xf8>)
 800227c:	493b      	ldr	r1, [pc, #236]	; (800236c <SPI_MASTER_0_lInit+0xfc>)
 800227e:	f7ff ff5b 	bl	8002138 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_DisableFEM(XMC_SPI0_CH1);
 8002282:	4839      	ldr	r0, [pc, #228]	; (8002368 <SPI_MASTER_0_lInit+0xf8>)
 8002284:	f7ff ff98 	bl	80021b8 <XMC_SPI_CH_DisableFEM>
                              
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI0_CH1);
 8002288:	4837      	ldr	r0, [pc, #220]	; (8002368 <SPI_MASTER_0_lInit+0xf8>)
 800228a:	f7ff ff6f 	bl	800216c <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI0_CH1, (uint8_t)8);
 800228e:	4836      	ldr	r0, [pc, #216]	; (8002368 <SPI_MASTER_0_lInit+0xf8>)
 8002290:	2108      	movs	r1, #8
 8002292:	f7ff ffaf 	bl	80021f4 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI0_CH1, (uint8_t)64);
 8002296:	4834      	ldr	r0, [pc, #208]	; (8002368 <SPI_MASTER_0_lInit+0xf8>)
 8002298:	2140      	movs	r1, #64	; 0x40
 800229a:	f7ff ffb9 	bl	8002210 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI0_CH1,
 800229e:	4832      	ldr	r0, [pc, #200]	; (8002368 <SPI_MASTER_0_lInit+0xf8>)
 80022a0:	2100      	movs	r1, #0
 80022a2:	2200      	movs	r2, #0
 80022a4:	f7ff ff98 	bl	80021d8 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI0_CH1, 2U);
 80022a8:	482f      	ldr	r0, [pc, #188]	; (8002368 <SPI_MASTER_0_lInit+0xf8>)
 80022aa:	2102      	movs	r1, #2
 80022ac:	f7ff ff6e 	bl	800218c <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)2, &SPI_MASTER_0_MISO_Config.port_config);
 80022b0:	482f      	ldr	r0, [pc, #188]	; (8002370 <SPI_MASTER_0_lInit+0x100>)
 80022b2:	2102      	movs	r1, #2
 80022b4:	4a2f      	ldr	r2, [pc, #188]	; (8002374 <SPI_MASTER_0_lInit+0x104>)
 80022b6:	f7fe f86b 	bl	8000390 <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH1, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_A);
 80022ba:	482b      	ldr	r0, [pc, #172]	; (8002368 <SPI_MASTER_0_lInit+0xf8>)
 80022bc:	2100      	movs	r1, #0
 80022be:	2200      	movs	r2, #0
 80022c0:	f7ff ffb4 	bl	800222c <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI0_CH1);
 80022c4:	4828      	ldr	r0, [pc, #160]	; (8002368 <SPI_MASTER_0_lInit+0xf8>)
 80022c6:	f7ff ff45 	bl	8002154 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, &SPI_MASTER_0_MOSI_Config.port_config);
 80022ca:	4829      	ldr	r0, [pc, #164]	; (8002370 <SPI_MASTER_0_lInit+0x100>)
 80022cc:	2105      	movs	r1, #5
 80022ce:	4a2a      	ldr	r2, [pc, #168]	; (8002378 <SPI_MASTER_0_lInit+0x108>)
 80022d0:	f7fe f85e 	bl	8000390 <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, &SPI_MASTER_0_SCLKOUT_Config.port_config);
 80022d4:	4826      	ldr	r0, [pc, #152]	; (8002370 <SPI_MASTER_0_lInit+0x100>)
 80022d6:	2104      	movs	r1, #4
 80022d8:	4a28      	ldr	r2, [pc, #160]	; (800237c <SPI_MASTER_0_lInit+0x10c>)
 80022da:	f7fe f859 	bl	8000390 <XMC_GPIO_Init>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH1,
 80022de:	4822      	ldr	r0, [pc, #136]	; (8002368 <SPI_MASTER_0_lInit+0xf8>)
 80022e0:	2110      	movs	r1, #16
 80022e2:	2202      	movs	r2, #2
 80022e4:	f7ff f880 	bl	80013e8 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_2);
            
  /* Configure transmit FIFO settings */
  XMC_USIC_CH_TXFIFO_Configure(XMC_SPI0_CH1,
 80022e8:	481f      	ldr	r0, [pc, #124]	; (8002368 <SPI_MASTER_0_lInit+0xf8>)
 80022ea:	2110      	movs	r1, #16
 80022ec:	2204      	movs	r2, #4
 80022ee:	2301      	movs	r3, #1
 80022f0:	f7ff f810 	bl	8001314 <XMC_USIC_CH_TXFIFO_Configure>
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               1U);

  /* Configure the service interrupt nodes for standard transmit FIFO events */
               
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_SPI0_CH1,
 80022f4:	481c      	ldr	r0, [pc, #112]	; (8002368 <SPI_MASTER_0_lInit+0xf8>)
 80022f6:	2110      	movs	r1, #16
 80022f8:	2201      	movs	r2, #1
 80022fa:	f7ff f891 	bl	8001420 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_1);
  /* Configure receive FIFO settings */
  XMC_USIC_CH_RXFIFO_Configure(XMC_SPI0_CH1,
 80022fe:	481a      	ldr	r0, [pc, #104]	; (8002368 <SPI_MASTER_0_lInit+0xf8>)
 8002300:	2100      	movs	r1, #0
 8002302:	2204      	movs	r2, #4
 8002304:	2300      	movs	r3, #0
 8002306:	f7ff f82d 	bl	8001364 <XMC_USIC_CH_RXFIFO_Configure>
                               0U,
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               0U);
             
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI0_CH1,
 800230a:	4817      	ldr	r0, [pc, #92]	; (8002368 <SPI_MASTER_0_lInit+0xf8>)
 800230c:	2110      	movs	r1, #16
 800230e:	2200      	movs	r2, #0
 8002310:	f7ff f8a4 	bl	800145c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_0);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI0_CH1,
 8002314:	4814      	ldr	r0, [pc, #80]	; (8002368 <SPI_MASTER_0_lInit+0xf8>)
 8002316:	2113      	movs	r1, #19
 8002318:	2200      	movs	r2, #0
 800231a:	f7ff f89f 	bl	800145c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                             (uint32_t)SPI_MASTER_SR_ID_0);
  /* Set priority of the Transmit interrupt */
  NVIC_SetPriority((IRQn_Type)85, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63U, 0U));
 800231e:	f7ff fe11 	bl	8001f44 <__NVIC_GetPriorityGrouping>
 8002322:	4603      	mov	r3, r0
 8002324:	4618      	mov	r0, r3
 8002326:	213f      	movs	r1, #63	; 0x3f
 8002328:	2200      	movs	r2, #0
 800232a:	f7ff fe5f 	bl	8001fec <NVIC_EncodePriority>
 800232e:	4603      	mov	r3, r0
 8002330:	2055      	movs	r0, #85	; 0x55
 8002332:	4619      	mov	r1, r3
 8002334:	f7ff fe30 	bl	8001f98 <__NVIC_SetPriority>
     
  /* Enable Transmit interrupt */
  NVIC_EnableIRQ((IRQn_Type)85);
 8002338:	2055      	movs	r0, #85	; 0x55
 800233a:	f7ff fe11 	bl	8001f60 <__NVIC_EnableIRQ>
             
  /* Set priority of the Receive interrupt */
  NVIC_SetPriority((IRQn_Type)84, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 62U, 0U));
 800233e:	f7ff fe01 	bl	8001f44 <__NVIC_GetPriorityGrouping>
 8002342:	4603      	mov	r3, r0
 8002344:	4618      	mov	r0, r3
 8002346:	213e      	movs	r1, #62	; 0x3e
 8002348:	2200      	movs	r2, #0
 800234a:	f7ff fe4f 	bl	8001fec <NVIC_EncodePriority>
 800234e:	4603      	mov	r3, r0
 8002350:	2054      	movs	r0, #84	; 0x54
 8002352:	4619      	mov	r1, r3
 8002354:	f7ff fe20 	bl	8001f98 <__NVIC_SetPriority>
    
  /* Enable Receive interrupt */
  NVIC_EnableIRQ((IRQn_Type)84);
 8002358:	2054      	movs	r0, #84	; 0x54
 800235a:	f7ff fe01 	bl	8001f60 <__NVIC_EnableIRQ>
    
  return status;
 800235e:	79fb      	ldrb	r3, [r7, #7]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40030200 	.word	0x40030200
 800236c:	1fff0814 	.word	0x1fff0814
 8002370:	48028200 	.word	0x48028200
 8002374:	1fff08d0 	.word	0x1fff08d0
 8002378:	1fff0800 	.word	0x1fff0800
 800237c:	08005084 	.word	0x08005084

08002380 <USIC0_1_IRQHandler>:
/*Transmit ISR*/
void SPI_MASTER_0_tx_handler()
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  SPI_MASTER_lTransmitHandler(&SPI_MASTER_0);
 8002384:	4801      	ldr	r0, [pc, #4]	; (800238c <USIC0_1_IRQHandler+0xc>)
 8002386:	f7ff fb29 	bl	80019dc <SPI_MASTER_lTransmitHandler>
}
 800238a:	bd80      	pop	{r7, pc}
 800238c:	1fff0844 	.word	0x1fff0844

08002390 <USIC0_0_IRQHandler>:

/*Receive ISR*/
void SPI_MASTER_0_rx_handler()
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  SPI_MASTER_lReceiveHandler(&SPI_MASTER_0);
 8002394:	4801      	ldr	r0, [pc, #4]	; (800239c <USIC0_0_IRQHandler+0xc>)
 8002396:	f7ff fc5b 	bl	8001c50 <SPI_MASTER_lReceiveHandler>
}
 800239a:	bd80      	pop	{r7, pc}
 800239c:	1fff0844 	.word	0x1fff0844

080023a0 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ae:	60da      	str	r2, [r3, #12]
}
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop

080023bc <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	7b5b      	ldrb	r3, [r3, #13]
 80023c8:	f083 0301 	eor.w	r3, r3, #1
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00f      	beq.n	80023f2 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7b1b      	ldrb	r3, [r3, #12]
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	f7fe fdb1 	bl	8000f44 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff ffda 	bl	80023a0 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3b04      	subs	r3, #4
 800240c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002414:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3b04      	subs	r3, #4
 800241a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f023 0201 	bic.w	r2, r3, #1
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	3b04      	subs	r3, #4
 800242a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800242c:	4a0c      	ldr	r2, [pc, #48]	; (8002460 <pxPortInitialiseStack+0x64>)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	3b14      	subs	r3, #20
 8002436:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3b04      	subs	r3, #4
 8002442:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f06f 0202 	mvn.w	r2, #2
 800244a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3b20      	subs	r3, #32
 8002450:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	08002465 	.word	0x08002465

08002464 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <prvTaskExitError+0x4c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002476:	d009      	beq.n	800248c <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002478:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	e7fe      	b.n	800248a <prvTaskExitError+0x26>
 800248c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800249e:	bf00      	nop
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0fc      	beq.n	80024a0 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	1fff0860 	.word	0x1fff0860
	...

080024c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <pxCurrentTCBConst2>)
 80024c2:	6819      	ldr	r1, [r3, #0]
 80024c4:	6808      	ldr	r0, [r1, #0]
 80024c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024ca:	f380 8809 	msr	PSP, r0
 80024ce:	f3bf 8f6f 	isb	sy
 80024d2:	f04f 0000 	mov.w	r0, #0
 80024d6:	f380 8811 	msr	BASEPRI, r0
 80024da:	4770      	bx	lr
 80024dc:	f3af 8000 	nop.w

080024e0 <pxCurrentTCBConst2>:
 80024e0:	1fff08ec 	.word	0x1fff08ec
 80024e4:	f3af 8000 	nop.w
 80024e8:	f3af 8000 	nop.w
 80024ec:	f3af 8000 	nop.w

080024f0 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80024f0:	4808      	ldr	r0, [pc, #32]	; (8002514 <prvPortStartFirstTask+0x24>)
 80024f2:	6800      	ldr	r0, [r0, #0]
 80024f4:	6800      	ldr	r0, [r0, #0]
 80024f6:	f380 8808 	msr	MSP, r0
 80024fa:	f04f 0000 	mov.w	r0, #0
 80024fe:	f380 8814 	msr	CONTROL, r0
 8002502:	b662      	cpsie	i
 8002504:	b661      	cpsie	f
 8002506:	f3bf 8f4f 	dsb	sy
 800250a:	f3bf 8f6f 	isb	sy
 800250e:	df00      	svc	0
 8002510:	bf00      	nop
 8002512:	0000      	.short	0x0000
 8002514:	e000ed08 	.word	0xe000ed08

08002518 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800251e:	4b44      	ldr	r3, [pc, #272]	; (8002630 <xPortStartScheduler+0x118>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a44      	ldr	r2, [pc, #272]	; (8002634 <xPortStartScheduler+0x11c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d109      	bne.n	800253c <xPortStartScheduler+0x24>
 8002528:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	e7fe      	b.n	800253a <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800253c:	4b3c      	ldr	r3, [pc, #240]	; (8002630 <xPortStartScheduler+0x118>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a3d      	ldr	r2, [pc, #244]	; (8002638 <xPortStartScheduler+0x120>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d109      	bne.n	800255a <xPortStartScheduler+0x42>
 8002546:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800254a:	f383 8811 	msr	BASEPRI, r3
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	f3bf 8f4f 	dsb	sy
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	e7fe      	b.n	8002558 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800255a:	4b38      	ldr	r3, [pc, #224]	; (800263c <xPortStartScheduler+0x124>)
 800255c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	22ff      	movs	r2, #255	; 0xff
 800256a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f023 0303 	bic.w	r3, r3, #3
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b30      	ldr	r3, [pc, #192]	; (8002640 <xPortStartScheduler+0x128>)
 8002580:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002582:	4b30      	ldr	r3, [pc, #192]	; (8002644 <xPortStartScheduler+0x12c>)
 8002584:	2207      	movs	r2, #7
 8002586:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002588:	e009      	b.n	800259e <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 800258a:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <xPortStartScheduler+0x12c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3b01      	subs	r3, #1
 8002590:	4a2c      	ldr	r2, [pc, #176]	; (8002644 <xPortStartScheduler+0x12c>)
 8002592:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	70fb      	strb	r3, [r7, #3]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800259e:	78fb      	ldrb	r3, [r7, #3]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	b25b      	sxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	dbef      	blt.n	800258a <xPortStartScheduler+0x72>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <xPortStartScheduler+0x12c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f1c3 0307 	rsb	r3, r3, #7
 80025b2:	2b06      	cmp	r3, #6
 80025b4:	d009      	beq.n	80025ca <xPortStartScheduler+0xb2>
 80025b6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80025ba:	f383 8811 	msr	BASEPRI, r3
 80025be:	f3bf 8f6f 	isb	sy
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	e7fe      	b.n	80025c8 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <xPortStartScheduler+0x12c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	4a1c      	ldr	r2, [pc, #112]	; (8002644 <xPortStartScheduler+0x12c>)
 80025d2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <xPortStartScheduler+0x12c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025dc:	4a19      	ldr	r2, [pc, #100]	; (8002644 <xPortStartScheduler+0x12c>)
 80025de:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80025e8:	4a17      	ldr	r2, [pc, #92]	; (8002648 <xPortStartScheduler+0x130>)
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <xPortStartScheduler+0x130>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f443 037c 	orr.w	r3, r3, #16515072	; 0xfc0000
 80025f2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <xPortStartScheduler+0x130>)
 80025f6:	4b14      	ldr	r3, [pc, #80]	; (8002648 <xPortStartScheduler+0x130>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f043 437c 	orr.w	r3, r3, #4227858432	; 0xfc000000
 80025fe:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002600:	f000 f8d6 	bl	80027b0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <xPortStartScheduler+0x134>)
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800260a:	f000 f8f3 	bl	80027f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800260e:	4a10      	ldr	r2, [pc, #64]	; (8002650 <xPortStartScheduler+0x138>)
 8002610:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <xPortStartScheduler+0x138>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002618:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800261a:	f7ff ff69 	bl	80024f0 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800261e:	f001 fad5 	bl	8003bcc <vTaskSwitchContext>
    prvTaskExitError();
 8002622:	f7ff ff1f 	bl	8002464 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	e000ed00 	.word	0xe000ed00
 8002634:	410fc271 	.word	0x410fc271
 8002638:	410fc270 	.word	0x410fc270
 800263c:	e000e400 	.word	0xe000e400
 8002640:	1fff08e4 	.word	0x1fff08e4
 8002644:	1fff08e8 	.word	0x1fff08e8
 8002648:	e000ed20 	.word	0xe000ed20
 800264c:	1fff0860 	.word	0x1fff0860
 8002650:	e000ef34 	.word	0xe000ef34

08002654 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800265e:	f383 8811 	msr	BASEPRI, r3
 8002662:	f3bf 8f6f 	isb	sy
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800266c:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <vPortEnterCritical+0x54>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	4a0d      	ldr	r2, [pc, #52]	; (80026a8 <vPortEnterCritical+0x54>)
 8002674:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <vPortEnterCritical+0x54>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d10e      	bne.n	800269c <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <vPortEnterCritical+0x58>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d009      	beq.n	800269c <vPortEnterCritical+0x48>
 8002688:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	e7fe      	b.n	800269a <vPortEnterCritical+0x46>
    }
}
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	1fff0860 	.word	0x1fff0860
 80026ac:	e000ed04 	.word	0xe000ed04

080026b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <vPortExitCritical+0x48>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <vPortExitCritical+0x22>
 80026be:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80026c2:	f383 8811 	msr	BASEPRI, r3
 80026c6:	f3bf 8f6f 	isb	sy
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	e7fe      	b.n	80026d0 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <vPortExitCritical+0x48>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	4a07      	ldr	r2, [pc, #28]	; (80026f8 <vPortExitCritical+0x48>)
 80026da:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <vPortExitCritical+0x48>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d104      	bne.n	80026ee <vPortExitCritical+0x3e>
 80026e4:	2300      	movs	r3, #0
 80026e6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	1fff0860 	.word	0x1fff0860
 80026fc:	00000000 	.word	0x00000000

08002700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002700:	f3ef 8009 	mrs	r0, PSP
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	4b15      	ldr	r3, [pc, #84]	; (8002760 <pxCurrentTCBConst>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	f01e 0f10 	tst.w	lr, #16
 8002710:	bf08      	it	eq
 8002712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800271a:	6010      	str	r0, [r2, #0]
 800271c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002720:	f04f 00fc 	mov.w	r0, #252	; 0xfc
 8002724:	f380 8811 	msr	BASEPRI, r0
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	f3bf 8f6f 	isb	sy
 8002730:	f001 fa4c 	bl	8003bcc <vTaskSwitchContext>
 8002734:	f04f 0000 	mov.w	r0, #0
 8002738:	f380 8811 	msr	BASEPRI, r0
 800273c:	bc09      	pop	{r0, r3}
 800273e:	6819      	ldr	r1, [r3, #0]
 8002740:	6808      	ldr	r0, [r1, #0]
 8002742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002746:	f01e 0f10 	tst.w	lr, #16
 800274a:	bf08      	it	eq
 800274c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002750:	f380 8809 	msr	PSP, r0
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	f3af 8000 	nop.w

08002760 <pxCurrentTCBConst>:
 8002760:	1fff08ec 	.word	0x1fff08ec
 8002764:	f3af 8000 	nop.w
 8002768:	f3af 8000 	nop.w
 800276c:	f3af 8000 	nop.w

08002770 <SysTick_Handler>:
    );
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002776:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800277a:	f383 8811 	msr	BASEPRI, r3
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	f3bf 8f4f 	dsb	sy
 8002786:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002788:	f001 f966 	bl	8003a58 <xTaskIncrementTick>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <SysTick_Handler+0x3c>)
 8002794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	2300      	movs	r3, #0
 800279c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	e000ed04 	.word	0xe000ed04

080027b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80027b4:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <vPortSetupTimerInterrupt+0x30>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <vPortSetupTimerInterrupt+0x34>)
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80027c0:	4a09      	ldr	r2, [pc, #36]	; (80027e8 <vPortSetupTimerInterrupt+0x38>)
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <vPortSetupTimerInterrupt+0x3c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	490a      	ldr	r1, [pc, #40]	; (80027f0 <vPortSetupTimerInterrupt+0x40>)
 80027c8:	fba1 1303 	umull	r1, r3, r1, r3
 80027cc:	099b      	lsrs	r3, r3, #6
 80027ce:	3b01      	subs	r3, #1
 80027d0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80027d2:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <vPortSetupTimerInterrupt+0x30>)
 80027d4:	2207      	movs	r2, #7
 80027d6:	601a      	str	r2, [r3, #0]
}
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000e010 	.word	0xe000e010
 80027e4:	e000e018 	.word	0xe000e018
 80027e8:	e000e014 	.word	0xe000e014
 80027ec:	2000ffc0 	.word	0x2000ffc0
 80027f0:	10624dd3 	.word	0x10624dd3

080027f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80027f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002804 <vPortEnableVFP+0x10>
 80027f8:	6801      	ldr	r1, [r0, #0]
 80027fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80027fe:	6001      	str	r1, [r0, #0]
 8002800:	4770      	bx	lr
 8002802:	0000      	.short	0x0000
 8002804:	e000ed88 	.word	0xe000ed88

08002808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800280e:	f3ef 8305 	mrs	r3, IPSR
 8002812:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b0f      	cmp	r3, #15
 8002818:	d913      	bls.n	8002842 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800281a:	4a15      	ldr	r2, [pc, #84]	; (8002870 <vPortValidateInterruptPriority+0x68>)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4413      	add	r3, r2
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002824:	4b13      	ldr	r3, [pc, #76]	; (8002874 <vPortValidateInterruptPriority+0x6c>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	7afa      	ldrb	r2, [r7, #11]
 800282a:	429a      	cmp	r2, r3
 800282c:	d209      	bcs.n	8002842 <vPortValidateInterruptPriority+0x3a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800282e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	e7fe      	b.n	8002840 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002842:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <vPortValidateInterruptPriority+0x70>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <vPortValidateInterruptPriority+0x74>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d909      	bls.n	8002866 <vPortValidateInterruptPriority+0x5e>
 8002852:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002856:	f383 8811 	msr	BASEPRI, r3
 800285a:	f3bf 8f6f 	isb	sy
 800285e:	f3bf 8f4f 	dsb	sy
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	e7fe      	b.n	8002864 <vPortValidateInterruptPriority+0x5c>
    }
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000e3f0 	.word	0xe000e3f0
 8002874:	1fff08e4 	.word	0x1fff08e4
 8002878:	e000ed0c 	.word	0xe000ed0c
 800287c:	1fff08e8 	.word	0x1fff08e8

08002880 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 8002888:	f001 f82a 	bl	80038e0 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f002 fb1f 	bl	8004ed0 <malloc>
 8002892:	4603      	mov	r3, r0
 8002894:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002896:	f001 f831 	bl	80038fc <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 800289a:	68fb      	ldr	r3, [r7, #12]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
    if( pv )
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d006      	beq.n	80028c0 <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 80028b2:	f001 f815 	bl	80038e0 <vTaskSuspendAll>
        {
            free( pv );
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f002 fb12 	bl	8004ee0 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 80028bc:	f001 f81e 	bl	80038fc <xTaskResumeAll>
    }
}
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop

080028c8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f103 0208 	add.w	r2, r3, #8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f04f 32ff 	mov.w	r2, #4294967295
 80028e0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f103 0208 	add.w	r2, r3, #8
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f103 0208 	add.w	r2, r3, #8
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop

08002908 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	601a      	str	r2, [r3, #0]
}
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop

08002968 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297e:	d103      	bne.n	8002988 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	e00c      	b.n	80029a2 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3308      	adds	r3, #8
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	e002      	b.n	8002996 <vListInsert+0x2e>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d9f6      	bls.n	8002990 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	601a      	str	r2, [r3, #0]
}
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6892      	ldr	r2, [r2, #8]
 80029ee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6852      	ldr	r2, [r2, #4]
 80029f8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d103      	bne.n	8002a0c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	1e5a      	subs	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d109      	bne.n	8002a54 <xQueueGenericReset+0x28>
 8002a40:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	e7fe      	b.n	8002a52 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8002a54:	f7ff fdfe 	bl	8002654 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	68f9      	ldr	r1, [r7, #12]
 8002a62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	441a      	add	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a84:	3b01      	subs	r3, #1
 8002a86:	68f9      	ldr	r1, [r7, #12]
 8002a88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	441a      	add	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	22ff      	movs	r2, #255	; 0xff
 8002a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	22ff      	movs	r2, #255	; 0xff
 8002aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d114      	bne.n	8002ad4 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01a      	beq.n	8002ae8 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3310      	adds	r3, #16
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f001 f92e 	bl	8003d18 <xTaskRemoveFromEventList>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d012      	beq.n	8002ae8 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <xQueueGenericReset+0xcc>)
 8002ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	f3bf 8f4f 	dsb	sy
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	e009      	b.n	8002ae8 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3310      	adds	r3, #16
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fef5 	bl	80028c8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3324      	adds	r3, #36	; 0x24
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fef0 	bl	80028c8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002ae8:	f7ff fde2 	bl	80026b0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002aec:	2301      	movs	r3, #1
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	e000ed04 	.word	0xe000ed04

08002afc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b08d      	sub	sp, #52	; 0x34
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	4613      	mov	r3, r2
 8002b08:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d109      	bne.n	8002b24 <xQueueGenericCreate+0x28>
 8002b10:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002b14:	f383 8811 	msr	BASEPRI, r3
 8002b18:	f3bf 8f6f 	isb	sy
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	e7fe      	b.n	8002b22 <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	fb02 f303 	mul.w	r3, r2, r3
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d006      	beq.n	8002b42 <xQueueGenericCreate+0x46>
 8002b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d101      	bne.n	8002b46 <xQueueGenericCreate+0x4a>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <xQueueGenericCreate+0x4c>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <xQueueGenericCreate+0x64>
 8002b4c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	e7fe      	b.n	8002b5e <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d809      	bhi.n	8002b80 <xQueueGenericCreate+0x84>
 8002b6c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	e7fe      	b.n	8002b7e <xQueueGenericCreate+0x82>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	3354      	adds	r3, #84	; 0x54
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fe7b 	bl	8002880 <pvPortMalloc>
 8002b8a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00d      	beq.n	8002bae <xQueueGenericCreate+0xb2>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3354      	adds	r3, #84	; 0x54
 8002b9a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b9c:	79fc      	ldrb	r4, [r7, #7]
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	4623      	mov	r3, r4
 8002baa:	f000 f805 	bl	8002bb8 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002bae:	6a3b      	ldr	r3, [r7, #32]
    }
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	372c      	adds	r7, #44	; 0x2c
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd90      	pop	{r4, r7, pc}

08002bb8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d103      	bne.n	8002bd4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e002      	b.n	8002bda <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002be6:	69b8      	ldr	r0, [r7, #24]
 8002be8:	2101      	movs	r1, #1
 8002bea:	f7ff ff1f 	bl	8002a2c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
        {
            pxNewQueue->pxQueueSetContainer = NULL;
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop

08002c04 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08e      	sub	sp, #56	; 0x38
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c12:	2300      	movs	r3, #0
 8002c14:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <xQueueGenericSend+0x30>
 8002c20:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002c24:	f383 8811 	msr	BASEPRI, r3
 8002c28:	f3bf 8f6f 	isb	sy
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
 8002c32:	e7fe      	b.n	8002c32 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d103      	bne.n	8002c42 <xQueueGenericSend+0x3e>
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <xQueueGenericSend+0x42>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <xQueueGenericSend+0x44>
 8002c46:	2300      	movs	r3, #0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d109      	bne.n	8002c60 <xQueueGenericSend+0x5c>
 8002c4c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	623b      	str	r3, [r7, #32]
 8002c5e:	e7fe      	b.n	8002c5e <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d103      	bne.n	8002c6e <xQueueGenericSend+0x6a>
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <xQueueGenericSend+0x6e>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <xQueueGenericSend+0x70>
 8002c72:	2300      	movs	r3, #0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d109      	bne.n	8002c8c <xQueueGenericSend+0x88>
 8002c78:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	e7fe      	b.n	8002c8a <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c8c:	f001 f9ea 	bl	8004064 <xTaskGetSchedulerState>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d102      	bne.n	8002c9c <xQueueGenericSend+0x98>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <xQueueGenericSend+0x9c>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <xQueueGenericSend+0x9e>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <xQueueGenericSend+0xb6>
 8002ca6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	e7fe      	b.n	8002cb8 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002cba:	f7ff fccb 	bl	8002654 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d302      	bcc.n	8002cd0 <xQueueGenericSend+0xcc>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d147      	bne.n	8002d60 <xQueueGenericSend+0x15c>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c

                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	f000 fa4c 	bl	8003178 <prvCopyDataToQueue>
 8002ce0:	62b8      	str	r0, [r7, #40]	; 0x28

                        if( pxQueue->pxQueueSetContainer != NULL )
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <xQueueGenericSend+0x114>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d104      	bne.n	8002cfa <xQueueGenericSend+0xf6>
 8002cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <xQueueGenericSend+0xf6>
 8002cf6:	bf00      	nop
 8002cf8:	e02e      	b.n	8002d58 <xQueueGenericSend+0x154>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002cfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cfc:	f000 fbb8 	bl	8003470 <prvNotifyQueueSetContainer>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d028      	beq.n	8002d58 <xQueueGenericSend+0x154>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock. A context switch is required. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002d06:	4b4c      	ldr	r3, [pc, #304]	; (8002e38 <xQueueGenericSend+0x234>)
 8002d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	e01f      	b.n	8002d58 <xQueueGenericSend+0x154>
                        }
                        else
                        {
                            /* If there was a task waiting for data to arrive on the
                             * queue then unblock it now. */
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d010      	beq.n	8002d42 <xQueueGenericSend+0x13e>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	3324      	adds	r3, #36	; 0x24
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fff7 	bl	8003d18 <xTaskRemoveFromEventList>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d013      	beq.n	8002d58 <xQueueGenericSend+0x154>
                                {
                                    /* The unblocked task has a priority higher than
                                     * our own so yield immediately.  Yes it is ok to
                                     * do this from within the critical section - the
                                     * kernel takes care of that. */
                                    queueYIELD_IF_USING_PREEMPTION();
 8002d30:	4b41      	ldr	r3, [pc, #260]	; (8002e38 <xQueueGenericSend+0x234>)
 8002d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	e00a      	b.n	8002d58 <xQueueGenericSend+0x154>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }
                            }
                            else if( xYieldRequired != pdFALSE )
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d007      	beq.n	8002d58 <xQueueGenericSend+0x154>
                            {
                                /* This path is a special case that will only get
                                 * executed if the task was holding multiple mutexes
                                 * and the mutexes were given back in an order that is
                                 * different to that in which they were taken. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002d48:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <xQueueGenericSend+0x234>)
 8002d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002d58:	f7ff fcaa 	bl	80026b0 <vPortExitCritical>
                return pdPASS;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e067      	b.n	8002e30 <xQueueGenericSend+0x22c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d103      	bne.n	8002d6e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002d66:	f7ff fca3 	bl	80026b0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e060      	b.n	8002e30 <xQueueGenericSend+0x22c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d106      	bne.n	8002d82 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002d74:	f107 0310 	add.w	r3, r7, #16
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f001 f831 	bl	8003de0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002d82:	f7ff fc95 	bl	80026b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002d86:	f000 fdab 	bl	80038e0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002d8a:	f7ff fc63 	bl	8002654 <vPortEnterCritical>
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	b25b      	sxtb	r3, r3
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d103      	bne.n	8002da6 <xQueueGenericSend+0x1a2>
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	b25b      	sxtb	r3, r3
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d103      	bne.n	8002dbe <xQueueGenericSend+0x1ba>
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dbe:	f7ff fc77 	bl	80026b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dc2:	f107 0210 	add.w	r2, r7, #16
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	f001 f81e 	bl	8003e0c <xTaskCheckForTimeOut>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d124      	bne.n	8002e20 <xQueueGenericSend+0x21c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dd8:	f000 fad4 	bl	8003384 <prvIsQueueFull>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d018      	beq.n	8002e14 <xQueueGenericSend+0x210>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	f103 0210 	add.w	r2, r3, #16
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	f000 ff47 	bl	8003c80 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002df2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002df4:	f000 fa52 	bl	800329c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002df8:	f000 fd80 	bl	80038fc <xTaskResumeAll>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d115      	bne.n	8002e2e <xQueueGenericSend+0x22a>
                {
                    portYIELD_WITHIN_API();
 8002e02:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <xQueueGenericSend+0x234>)
 8002e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	e00c      	b.n	8002e2e <xQueueGenericSend+0x22a>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e16:	f000 fa41 	bl	800329c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002e1a:	f000 fd6f 	bl	80038fc <xTaskResumeAll>
 8002e1e:	e74c      	b.n	8002cba <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e22:	f000 fa3b 	bl	800329c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002e26:	f000 fd69 	bl	80038fc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e000      	b.n	8002e30 <xQueueGenericSend+0x22c>
        }
    } /*lint -restore */
 8002e2e:	e744      	b.n	8002cba <xQueueGenericSend+0xb6>
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3738      	adds	r7, #56	; 0x38
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	e000ed04 	.word	0xe000ed04

08002e3c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b090      	sub	sp, #64	; 0x40
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d109      	bne.n	8002e68 <xQueueGenericSendFromISR+0x2c>
 8002e54:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e66:	e7fe      	b.n	8002e66 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <xQueueGenericSendFromISR+0x3a>
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <xQueueGenericSendFromISR+0x3e>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <xQueueGenericSendFromISR+0x40>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d109      	bne.n	8002e94 <xQueueGenericSendFromISR+0x58>
 8002e80:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
 8002e92:	e7fe      	b.n	8002e92 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d103      	bne.n	8002ea2 <xQueueGenericSendFromISR+0x66>
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <xQueueGenericSendFromISR+0x6a>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <xQueueGenericSendFromISR+0x6c>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <xQueueGenericSendFromISR+0x84>
 8002eac:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	623b      	str	r3, [r7, #32]
 8002ebe:	e7fe      	b.n	8002ebe <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ec0:	f7ff fca2 	bl	8002808 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002ec4:	f3ef 8211 	mrs	r2, BASEPRI
 8002ec8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	61fa      	str	r2, [r7, #28]
 8002eda:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002edc:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d302      	bcc.n	8002ef2 <xQueueGenericSendFromISR+0xb6>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d156      	bne.n	8002fa0 <xQueueGenericSendFromISR+0x164>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ef8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	f000 f936 	bl	8003178 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002f0c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f14:	d12b      	bne.n	8002f6e <xQueueGenericSendFromISR+0x132>
            {
                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        if( pxQueue->pxQueueSetContainer != NULL )
 8002f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d014      	beq.n	8002f48 <xQueueGenericSendFromISR+0x10c>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d104      	bne.n	8002f2e <xQueueGenericSendFromISR+0xf2>
 8002f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <xQueueGenericSendFromISR+0xf2>
 8002f2a:	bf00      	nop
 8002f2c:	e035      	b.n	8002f9a <xQueueGenericSendFromISR+0x15e>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002f2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f30:	f000 fa9e 	bl	8003470 <prvNotifyQueueSetContainer>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d02f      	beq.n	8002f9a <xQueueGenericSendFromISR+0x15e>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock.  A context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d02c      	beq.n	8002f9a <xQueueGenericSendFromISR+0x15e>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	e028      	b.n	8002f9a <xQueueGenericSendFromISR+0x15e>
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else
                        {
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d024      	beq.n	8002f9a <xQueueGenericSendFromISR+0x15e>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f52:	3324      	adds	r3, #36	; 0x24
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 fedf 	bl	8003d18 <xTaskRemoveFromEventList>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01c      	beq.n	8002f9a <xQueueGenericSendFromISR+0x15e>
                                {
                                    /* The task waiting has a higher priority so
                                     *  record that a context switch is required. */
                                    if( pxHigherPriorityTaskWoken != NULL )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d019      	beq.n	8002f9a <xQueueGenericSendFromISR+0x15e>
                                    {
                                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	e015      	b.n	8002f9a <xQueueGenericSendFromISR+0x15e>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002f6e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002f72:	2b7f      	cmp	r3, #127	; 0x7f
 8002f74:	d109      	bne.n	8002f8a <xQueueGenericSendFromISR+0x14e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002f76:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	e7fe      	b.n	8002f88 <xQueueGenericSendFromISR+0x14c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f8e:	3301      	adds	r3, #1
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
        {
 8002f9e:	e001      	b.n	8002fa4 <xQueueGenericSendFromISR+0x168>
            xReturn = pdPASS;
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa6:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3740      	adds	r7, #64	; 0x40
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08c      	sub	sp, #48	; 0x30
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <xQueueReceive+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002fd2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	623b      	str	r3, [r7, #32]
 8002fe4:	e7fe      	b.n	8002fe4 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d103      	bne.n	8002ff4 <xQueueReceive+0x3c>
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <xQueueReceive+0x40>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <xQueueReceive+0x42>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <xQueueReceive+0x5a>
 8002ffe:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	e7fe      	b.n	8003010 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003012:	f001 f827 	bl	8004064 <xTaskGetSchedulerState>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d102      	bne.n	8003022 <xQueueReceive+0x6a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <xQueueReceive+0x6e>
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <xQueueReceive+0x70>
 8003026:	2300      	movs	r3, #0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d109      	bne.n	8003040 <xQueueReceive+0x88>
 800302c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	e7fe      	b.n	800303e <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003040:	f7ff fb08 	bl	8002654 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003048:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01f      	beq.n	8003090 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	f000 f8fc 	bl	8003250 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	1e5a      	subs	r2, r3, #1
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00f      	beq.n	8003088 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	3310      	adds	r3, #16
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fe53 	bl	8003d18 <xTaskRemoveFromEventList>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003078:	4b3e      	ldr	r3, [pc, #248]	; (8003174 <xQueueReceive+0x1bc>)
 800307a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003088:	f7ff fb12 	bl	80026b0 <vPortExitCritical>
                return pdPASS;
 800308c:	2301      	movs	r3, #1
 800308e:	e06d      	b.n	800316c <xQueueReceive+0x1b4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d103      	bne.n	800309e <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003096:	f7ff fb0b 	bl	80026b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800309a:	2300      	movs	r3, #0
 800309c:	e066      	b.n	800316c <xQueueReceive+0x1b4>
                }
                else if( xEntryTimeSet == pdFALSE )
 800309e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d106      	bne.n	80030b2 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80030a4:	f107 0310 	add.w	r3, r7, #16
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fe99 	bl	8003de0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80030ae:	2301      	movs	r3, #1
 80030b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80030b2:	f7ff fafd 	bl	80026b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80030b6:	f000 fc13 	bl	80038e0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80030ba:	f7ff facb 	bl	8002654 <vPortEnterCritical>
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	b25b      	sxtb	r3, r3
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d103      	bne.n	80030d6 <xQueueReceive+0x11e>
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	b25b      	sxtb	r3, r3
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d103      	bne.n	80030ee <xQueueReceive+0x136>
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030ee:	f7ff fadf 	bl	80026b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030f2:	f107 0210 	add.w	r2, r7, #16
 80030f6:	1d3b      	adds	r3, r7, #4
 80030f8:	4610      	mov	r0, r2
 80030fa:	4619      	mov	r1, r3
 80030fc:	f000 fe86 	bl	8003e0c <xTaskCheckForTimeOut>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d124      	bne.n	8003150 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003108:	f000 f926 	bl	8003358 <prvIsQueueEmpty>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d018      	beq.n	8003144 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003114:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4610      	mov	r0, r2
 800311c:	4619      	mov	r1, r3
 800311e:	f000 fdaf 	bl	8003c80 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003124:	f000 f8ba 	bl	800329c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003128:	f000 fbe8 	bl	80038fc <xTaskResumeAll>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d11b      	bne.n	800316a <xQueueReceive+0x1b2>
                {
                    portYIELD_WITHIN_API();
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <xQueueReceive+0x1bc>)
 8003134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	e012      	b.n	800316a <xQueueReceive+0x1b2>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003146:	f000 f8a9 	bl	800329c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800314a:	f000 fbd7 	bl	80038fc <xTaskResumeAll>
 800314e:	e777      	b.n	8003040 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003152:	f000 f8a3 	bl	800329c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003156:	f000 fbd1 	bl	80038fc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800315a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800315c:	f000 f8fc 	bl	8003358 <prvIsQueueEmpty>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <xQueueReceive+0x1b2>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003166:	2300      	movs	r3, #0
 8003168:	e000      	b.n	800316c <xQueueReceive+0x1b4>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
 800316a:	e769      	b.n	8003040 <xQueueReceive+0x88>
}
 800316c:	4618      	mov	r0, r3
 800316e:	3730      	adds	r7, #48	; 0x30
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	e000ed04 	.word	0xe000ed04

08003178 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10d      	bne.n	80031b2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d14f      	bne.n	800323e <prvCopyDataToQueue+0xc6>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 ff7c 	bl	80040a0 <xTaskPriorityDisinherit>
 80031a8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	e045      	b.n	800323e <prvCopyDataToQueue+0xc6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d11a      	bne.n	80031ee <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	4610      	mov	r0, r2
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	461a      	mov	r2, r3
 80031c6:	f001 fe93 	bl	8004ef0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	441a      	add	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d32c      	bcc.n	800323e <prvCopyDataToQueue+0xc6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	e027      	b.n	800323e <prvCopyDataToQueue+0xc6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	4610      	mov	r0, r2
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	461a      	mov	r2, r3
 80031fc:	f001 fe78 	bl	8004ef0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	425b      	negs	r3, r3
 800320a:	441a      	add	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d207      	bcs.n	800322c <prvCopyDataToQueue+0xb4>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	425b      	negs	r3, r3
 8003226:	441a      	add	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d105      	bne.n	800323e <prvCopyDataToQueue+0xc6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <prvCopyDataToQueue+0xc6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	3b01      	subs	r3, #1
 800323c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003246:	697b      	ldr	r3, [r7, #20]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d019      	beq.n	8003296 <prvCopyDataFromQueue+0x46>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	441a      	add	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	429a      	cmp	r2, r3
 800327a:	d303      	bcc.n	8003284 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	6838      	ldr	r0, [r7, #0]
 800328e:	4611      	mov	r1, r2
 8003290:	461a      	mov	r2, r3
 8003292:	f001 fe2d 	bl	8004ef0 <memcpy>
    }
}
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80032a4:	f7ff f9d6 	bl	8002654 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80032b0:	e020      	b.n	80032f4 <prvUnlockQueue+0x58>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d008      	beq.n	80032cc <prvUnlockQueue+0x30>
                    {
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8d8 	bl	8003470 <prvNotifyQueueSetContainer>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d012      	beq.n	80032ec <prvUnlockQueue+0x50>
                        {
                            /* The queue is a member of a queue set, and posting to
                             * the queue set caused a higher priority task to unblock.
                             * A context switch is required. */
                            vTaskMissedYield();
 80032c6:	f000 fe15 	bl	8003ef4 <vTaskMissedYield>
 80032ca:	e00f      	b.n	80032ec <prvUnlockQueue+0x50>
                    else
                    {
                        /* Tasks that are removed from the event list will get
                         * added to the pending ready list as the scheduler is still
                         * suspended. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <prvUnlockQueue+0x4e>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3324      	adds	r3, #36	; 0x24
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fd1d 	bl	8003d18 <xTaskRemoveFromEventList>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <prvUnlockQueue+0x50>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                vTaskMissedYield();
 80032e4:	f000 fe06 	bl	8003ef4 <vTaskMissedYield>
 80032e8:	e000      	b.n	80032ec <prvUnlockQueue+0x50>
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else
                        {
                            break;
 80032ea:	e007      	b.n	80032fc <prvUnlockQueue+0x60>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	73fb      	strb	r3, [r7, #15]
    taskENTER_CRITICAL();
    {
        int8_t cTxLock = pxQueue->cTxLock;

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80032f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	dcda      	bgt.n	80032b2 <prvUnlockQueue+0x16>
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	22ff      	movs	r2, #255	; 0xff
 8003300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003304:	f7ff f9d4 	bl	80026b0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003308:	f7ff f9a4 	bl	8002654 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003312:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003314:	e013      	b.n	800333e <prvUnlockQueue+0xa2>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00e      	beq.n	800333c <prvUnlockQueue+0xa0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3310      	adds	r3, #16
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fcf8 	bl	8003d18 <xTaskRemoveFromEventList>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 800332e:	f000 fde1 	bl	8003ef4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003332:	7bbb      	ldrb	r3, [r7, #14]
 8003334:	3b01      	subs	r3, #1
 8003336:	b2db      	uxtb	r3, r3
 8003338:	73bb      	strb	r3, [r7, #14]
 800333a:	e000      	b.n	800333e <prvUnlockQueue+0xa2>
            }
            else
            {
                break;
 800333c:	e003      	b.n	8003346 <prvUnlockQueue+0xaa>
    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
    {
        int8_t cRxLock = pxQueue->cRxLock;

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800333e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003342:	2b00      	cmp	r3, #0
 8003344:	dce7      	bgt.n	8003316 <prvUnlockQueue+0x7a>
            {
                break;
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	22ff      	movs	r2, #255	; 0xff
 800334a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800334e:	f7ff f9af 	bl	80026b0 <vPortExitCritical>
}
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003360:	f7ff f978 	bl	8002654 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800336c:	2301      	movs	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	e001      	b.n	8003376 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003376:	f7ff f99b 	bl	80026b0 <vPortExitCritical>

    return xReturn;
 800337a:	68fb      	ldr	r3, [r7, #12]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800338c:	f7ff f962 	bl	8002654 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003398:	429a      	cmp	r2, r3
 800339a:	d102      	bne.n	80033a2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800339c:	2301      	movs	r3, #1
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	e001      	b.n	80033a6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80033a6:	f7ff f983 	bl	80026b0 <vPortExitCritical>

    return xReturn;
 80033aa:	68fb      	ldr	r3, [r7, #12]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	e014      	b.n	80033ee <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033c4:	4a0e      	ldr	r2, [pc, #56]	; (8003400 <vQueueAddToRegistry+0x4c>)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10b      	bne.n	80033e8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033d0:	490b      	ldr	r1, [pc, #44]	; (8003400 <vQueueAddToRegistry+0x4c>)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80033da:	4a09      	ldr	r2, [pc, #36]	; (8003400 <vQueueAddToRegistry+0x4c>)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4413      	add	r3, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80033e6:	e005      	b.n	80033f4 <vQueueAddToRegistry+0x40>
    {
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3301      	adds	r3, #1
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b07      	cmp	r3, #7
 80033f2:	d9e7      	bls.n	80033c4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	1fff0a38 	.word	0x1fff0a38

08003404 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003414:	f7ff f91e 	bl	8002654 <vPortEnterCritical>
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800341e:	b2db      	uxtb	r3, r3
 8003420:	b25b      	sxtb	r3, r3
 8003422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003426:	d103      	bne.n	8003430 <vQueueWaitForMessageRestricted+0x2c>
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003436:	b2db      	uxtb	r3, r3
 8003438:	b25b      	sxtb	r3, r3
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d103      	bne.n	8003448 <vQueueWaitForMessageRestricted+0x44>
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003448:	f7ff f932 	bl	80026b0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	2b00      	cmp	r3, #0
 8003452:	d106      	bne.n	8003462 <vQueueWaitForMessageRestricted+0x5e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	3324      	adds	r3, #36	; 0x24
 8003458:	4618      	mov	r0, r3
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	f000 fc31 	bl	8003cc4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003462:	6978      	ldr	r0, [r7, #20]
 8003464:	f7ff ff1a 	bl	800329c <prvUnlockQueue>
    }
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop

08003470 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347c:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]

        /* This function must be called form a critical section. */

        configASSERT( pxQueueSetContainer );
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <prvNotifyQueueSetContainer+0x2c>
 8003488:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	e7fe      	b.n	800349a <prvNotifyQueueSetContainer+0x2a>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d309      	bcc.n	80034bc <prvNotifyQueueSetContainer+0x4c>
 80034a8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	e7fe      	b.n	80034ba <prvNotifyQueueSetContainer+0x4a>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d234      	bcs.n	8003532 <prvNotifyQueueSetContainer+0xc2>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034ce:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80034d0:	1d3b      	adds	r3, r7, #4
 80034d2:	69b8      	ldr	r0, [r7, #24]
 80034d4:	4619      	mov	r1, r3
 80034d6:	2200      	movs	r2, #0
 80034d8:	f7ff fe4e 	bl	8003178 <prvCopyDataToQueue>
 80034dc:	61f8      	str	r0, [r7, #28]

            if( cTxLock == queueUNLOCKED )
 80034de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d10e      	bne.n	8003506 <prvNotifyQueueSetContainer+0x96>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <prvNotifyQueueSetContainer+0xc2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	3324      	adds	r3, #36	; 0x24
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fc0f 	bl	8003d18 <xTaskRemoveFromEventList>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d018      	beq.n	8003532 <prvNotifyQueueSetContainer+0xc2>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8003500:	2301      	movs	r3, #1
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	e015      	b.n	8003532 <prvNotifyQueueSetContainer+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                configASSERT( cTxLock != queueINT8_MAX );
 8003506:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800350a:	2b7f      	cmp	r3, #127	; 0x7f
 800350c:	d109      	bne.n	8003522 <prvNotifyQueueSetContainer+0xb2>
 800350e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	e7fe      	b.n	8003520 <prvNotifyQueueSetContainer+0xb0>

                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	3301      	adds	r3, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	b2da      	uxtb	r2, r3
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003530:	e7ff      	b.n	8003532 <prvNotifyQueueSetContainer+0xc2>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003532:	69fb      	ldr	r3, [r7, #28]
    }
 8003534:	4618      	mov	r0, r3
 8003536:	3720      	adds	r7, #32
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800353c:	b580      	push	{r7, lr}
 800353e:	b08c      	sub	sp, #48	; 0x30
 8003540:	af04      	add	r7, sp, #16
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff f995 	bl	8002880 <pvPortMalloc>
 8003556:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00e      	beq.n	800357c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800355e:	2070      	movs	r0, #112	; 0x70
 8003560:	f7ff f98e 	bl	8002880 <pvPortMalloc>
 8003564:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	631a      	str	r2, [r3, #48]	; 0x30
 8003572:	e005      	b.n	8003580 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003574:	6978      	ldr	r0, [r7, #20]
 8003576:	f7ff f995 	bl	80028a4 <vPortFree>
 800357a:	e001      	b.n	8003580 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800357c:	2300      	movs	r3, #0
 800357e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d013      	beq.n	80035ae <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003586:	88fa      	ldrh	r2, [r7, #6]
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358e:	9301      	str	r3, [sp, #4]
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	9302      	str	r3, [sp, #8]
 8003594:	2300      	movs	r3, #0
 8003596:	9303      	str	r3, [sp, #12]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	f000 f80f 	bl	80035c0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80035a2:	69f8      	ldr	r0, [r7, #28]
 80035a4:	f000 f8ac 	bl	8003700 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80035a8:	2301      	movs	r3, #1
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	e002      	b.n	80035b4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035ae:	f04f 33ff 	mov.w	r3, #4294967295
 80035b2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80035b4:	69bb      	ldr	r3, [r7, #24]
    }
 80035b6:	4618      	mov	r0, r3
 80035b8:	3720      	adds	r7, #32
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop

080035c0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4610      	mov	r0, r2
 80035d8:	21a5      	movs	r1, #165	; 0xa5
 80035da:	461a      	mov	r2, r3
 80035dc:	f001 fc93 	bl	8004f06 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035ea:	3b01      	subs	r3, #1
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f023 0307 	bic.w	r3, r3, #7
 80035f8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	2b00      	cmp	r3, #0
 8003602:	d009      	beq.n	8003618 <prvInitialiseNewTask+0x58>
 8003604:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	e7fe      	b.n	8003616 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d01e      	beq.n	800365c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	e013      	b.n	800364c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	4413      	add	r3, r2
 800362a:	7819      	ldrb	r1, [r3, #0]
 800362c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	4413      	add	r3, r2
 8003632:	3330      	adds	r3, #48	; 0x30
 8003634:	460a      	mov	r2, r1
 8003636:	711a      	strb	r2, [r3, #4]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	4413      	add	r3, r2
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d100      	bne.n	8003646 <prvInitialiseNewTask+0x86>
            {
                break;
 8003644:	e005      	b.n	8003652 <prvInitialiseNewTask+0x92>
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3301      	adds	r3, #1
 800364a:	61fb      	str	r3, [r7, #28]
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b0f      	cmp	r3, #15
 8003650:	d9e8      	bls.n	8003624 <prvInitialiseNewTask+0x64>
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800365a:	e003      	b.n	8003664 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003666:	2b04      	cmp	r3, #4
 8003668:	d901      	bls.n	800366e <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800366a:	2304      	movs	r3, #4
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003672:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003678:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	2200      	movs	r2, #0
 800367e:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003682:	3304      	adds	r3, #4
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff f93f 	bl	8002908 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	3318      	adds	r3, #24
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff f93a 	bl	8002908 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003698:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369c:	f1c3 0205 	rsb	r2, r3, #5
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
        {
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	3354      	adds	r3, #84	; 0x54
 80036ae:	4618      	mov	r0, r3
 80036b0:	2100      	movs	r1, #0
 80036b2:	2214      	movs	r2, #20
 80036b4:	f001 fc27 	bl	8004f06 <memset>
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	3368      	adds	r3, #104	; 0x68
 80036bc:	4618      	mov	r0, r3
 80036be:	2100      	movs	r1, #0
 80036c0:	2204      	movs	r2, #4
 80036c2:	f001 fc20 	bl	8004f06 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	336c      	adds	r3, #108	; 0x6c
 80036ca:	4618      	mov	r0, r3
 80036cc:	2100      	movs	r1, #0
 80036ce:	2201      	movs	r2, #1
 80036d0:	f001 fc19 	bl	8004f06 <memset>
        }
    #endif

    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            pxNewTCB->ucDelayAborted = pdFALSE;
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036dc:	69b8      	ldr	r0, [r7, #24]
 80036de:	68f9      	ldr	r1, [r7, #12]
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	f7fe fe8b 	bl	80023fc <pxPortInitialiseStack>
 80036e6:	4602      	mov	r2, r0
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ea:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <prvInitialiseNewTask+0x138>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036f6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop

08003700 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003708:	f7fe ffa4 	bl	8002654 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800370c:	4b2d      	ldr	r3, [pc, #180]	; (80037c4 <prvAddNewTaskToReadyList+0xc4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	4a2c      	ldr	r2, [pc, #176]	; (80037c4 <prvAddNewTaskToReadyList+0xc4>)
 8003714:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003716:	4b2c      	ldr	r3, [pc, #176]	; (80037c8 <prvAddNewTaskToReadyList+0xc8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d109      	bne.n	8003732 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800371e:	4a2a      	ldr	r2, [pc, #168]	; (80037c8 <prvAddNewTaskToReadyList+0xc8>)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003724:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <prvAddNewTaskToReadyList+0xc4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d110      	bne.n	800374e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800372c:	f000 fc06 	bl	8003f3c <prvInitialiseTaskLists>
 8003730:	e00d      	b.n	800374e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003732:	4b26      	ldr	r3, [pc, #152]	; (80037cc <prvAddNewTaskToReadyList+0xcc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800373a:	4b23      	ldr	r3, [pc, #140]	; (80037c8 <prvAddNewTaskToReadyList+0xc8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	429a      	cmp	r2, r3
 8003746:	d802      	bhi.n	800374e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003748:	4a1f      	ldr	r2, [pc, #124]	; (80037c8 <prvAddNewTaskToReadyList+0xc8>)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <prvAddNewTaskToReadyList+0xd0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3301      	adds	r3, #1
 8003754:	4a1e      	ldr	r2, [pc, #120]	; (80037d0 <prvAddNewTaskToReadyList+0xd0>)
 8003756:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003758:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <prvAddNewTaskToReadyList+0xd0>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	461a      	mov	r2, r3
 8003766:	2301      	movs	r3, #1
 8003768:	fa03 f202 	lsl.w	r2, r3, r2
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <prvAddNewTaskToReadyList+0xd4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4313      	orrs	r3, r2
 8003772:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <prvAddNewTaskToReadyList+0xd4>)
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4a15      	ldr	r2, [pc, #84]	; (80037d8 <prvAddNewTaskToReadyList+0xd8>)
 8003784:	441a      	add	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3304      	adds	r3, #4
 800378a:	4610      	mov	r0, r2
 800378c:	4619      	mov	r1, r3
 800378e:	f7ff f8c7 	bl	8002920 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003792:	f7fe ff8d 	bl	80026b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <prvAddNewTaskToReadyList+0xcc>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00e      	beq.n	80037bc <prvAddNewTaskToReadyList+0xbc>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800379e:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <prvAddNewTaskToReadyList+0xc8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d207      	bcs.n	80037bc <prvAddNewTaskToReadyList+0xbc>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <prvAddNewTaskToReadyList+0xdc>)
 80037ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	1fff09c4 	.word	0x1fff09c4
 80037c8:	1fff08ec 	.word	0x1fff08ec
 80037cc:	1fff09d0 	.word	0x1fff09d0
 80037d0:	1fff09e0 	.word	0x1fff09e0
 80037d4:	1fff09cc 	.word	0x1fff09cc
 80037d8:	1fff08f0 	.word	0x1fff08f0
 80037dc:	e000ed04 	.word	0xe000ed04

080037e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d016      	beq.n	8003820 <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80037f2:	4b12      	ldr	r3, [pc, #72]	; (800383c <vTaskDelay+0x5c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <vTaskDelay+0x2e>
 80037fa:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	e7fe      	b.n	800380c <vTaskDelay+0x2c>
            vTaskSuspendAll();
 800380e:	f000 f867 	bl	80038e0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	2100      	movs	r1, #0
 8003816:	f000 fcbd 	bl	8004194 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800381a:	f000 f86f 	bl	80038fc <xTaskResumeAll>
 800381e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d107      	bne.n	8003836 <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 8003826:	4b06      	ldr	r3, [pc, #24]	; (8003840 <vTaskDelay+0x60>)
 8003828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	1fff09ec 	.word	0x1fff09ec
 8003840:	e000ed04 	.word	0xe000ed04

08003844 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800384a:	2300      	movs	r3, #0
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <vTaskStartScheduler+0x80>)
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	481d      	ldr	r0, [pc, #116]	; (80038c8 <vTaskStartScheduler+0x84>)
 8003854:	491d      	ldr	r1, [pc, #116]	; (80038cc <vTaskStartScheduler+0x88>)
 8003856:	2282      	movs	r2, #130	; 0x82
 8003858:	2300      	movs	r3, #0
 800385a:	f7ff fe6f 	bl	800353c <xTaskCreate>
 800385e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d102      	bne.n	800386c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003866:	f000 fcff 	bl	8004268 <xTimerCreateTimerTask>
 800386a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d115      	bne.n	800389e <vTaskStartScheduler+0x5a>
 8003872:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003884:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <vTaskStartScheduler+0x8c>)
 8003886:	f04f 32ff 	mov.w	r2, #4294967295
 800388a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800388c:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <vTaskStartScheduler+0x90>)
 800388e:	2201      	movs	r2, #1
 8003890:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003892:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <vTaskStartScheduler+0x94>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003898:	f7fe fe3e 	bl	8002518 <xPortStartScheduler>
 800389c:	e00d      	b.n	80038ba <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a4:	d109      	bne.n	80038ba <vTaskStartScheduler+0x76>
 80038a6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	e7fe      	b.n	80038b8 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <vTaskStartScheduler+0x98>)
 80038bc:	681b      	ldr	r3, [r3, #0]
}
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	1fff09e8 	.word	0x1fff09e8
 80038c8:	08003f0d 	.word	0x08003f0d
 80038cc:	08005124 	.word	0x08005124
 80038d0:	1fff09e4 	.word	0x1fff09e4
 80038d4:	1fff09d0 	.word	0x1fff09d0
 80038d8:	1fff09c8 	.word	0x1fff09c8
 80038dc:	1fff0864 	.word	0x1fff0864

080038e0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <vTaskSuspendAll+0x18>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3301      	adds	r3, #1
 80038ea:	4a03      	ldr	r2, [pc, #12]	; (80038f8 <vTaskSuspendAll+0x18>)
 80038ec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	1fff09ec 	.word	0x1fff09ec

080038fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800390a:	4b42      	ldr	r3, [pc, #264]	; (8003a14 <xTaskResumeAll+0x118>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <xTaskResumeAll+0x2a>
 8003912:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	e7fe      	b.n	8003924 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003926:	f7fe fe95 	bl	8002654 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800392a:	4b3a      	ldr	r3, [pc, #232]	; (8003a14 <xTaskResumeAll+0x118>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3b01      	subs	r3, #1
 8003930:	4a38      	ldr	r2, [pc, #224]	; (8003a14 <xTaskResumeAll+0x118>)
 8003932:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003934:	4b37      	ldr	r3, [pc, #220]	; (8003a14 <xTaskResumeAll+0x118>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d163      	bne.n	8003a04 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800393c:	4b36      	ldr	r3, [pc, #216]	; (8003a18 <xTaskResumeAll+0x11c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d05f      	beq.n	8003a04 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003944:	e030      	b.n	80039a8 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003946:	4b35      	ldr	r3, [pc, #212]	; (8003a1c <xTaskResumeAll+0x120>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3318      	adds	r3, #24
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff f840 	bl	80029d8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	3304      	adds	r3, #4
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff f83b 	bl	80029d8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	461a      	mov	r2, r3
 8003968:	2301      	movs	r3, #1
 800396a:	fa03 f202 	lsl.w	r2, r3, r2
 800396e:	4b2c      	ldr	r3, [pc, #176]	; (8003a20 <xTaskResumeAll+0x124>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4313      	orrs	r3, r2
 8003974:	4a2a      	ldr	r2, [pc, #168]	; (8003a20 <xTaskResumeAll+0x124>)
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4a27      	ldr	r2, [pc, #156]	; (8003a24 <xTaskResumeAll+0x128>)
 8003986:	441a      	add	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	3304      	adds	r3, #4
 800398c:	4610      	mov	r0, r2
 800398e:	4619      	mov	r1, r3
 8003990:	f7fe ffc6 	bl	8002920 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003998:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <xTaskResumeAll+0x12c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 80039a2:	4b22      	ldr	r3, [pc, #136]	; (8003a2c <xTaskResumeAll+0x130>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039a8:	4b1c      	ldr	r3, [pc, #112]	; (8003a1c <xTaskResumeAll+0x120>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1ca      	bne.n	8003946 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80039b6:	f000 fb3b 	bl	8004030 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039ba:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <xTaskResumeAll+0x134>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d010      	beq.n	80039e8 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80039c6:	f000 f847 	bl	8003a58 <xTaskIncrementTick>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 80039d0:	4b16      	ldr	r3, [pc, #88]	; (8003a2c <xTaskResumeAll+0x130>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3b01      	subs	r3, #1
 80039da:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f1      	bne.n	80039c6 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 80039e2:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <xTaskResumeAll+0x134>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80039e8:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <xTaskResumeAll+0x130>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d009      	beq.n	8003a04 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80039f0:	2301      	movs	r3, #1
 80039f2:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80039f4:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <xTaskResumeAll+0x138>)
 80039f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003a04:	f7fe fe54 	bl	80026b0 <vPortExitCritical>

    return xAlreadyYielded;
 8003a08:	68bb      	ldr	r3, [r7, #8]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	1fff09ec 	.word	0x1fff09ec
 8003a18:	1fff09c4 	.word	0x1fff09c4
 8003a1c:	1fff0984 	.word	0x1fff0984
 8003a20:	1fff09cc 	.word	0x1fff09cc
 8003a24:	1fff08f0 	.word	0x1fff08f0
 8003a28:	1fff08ec 	.word	0x1fff08ec
 8003a2c:	1fff09d8 	.word	0x1fff09d8
 8003a30:	1fff09d4 	.word	0x1fff09d4
 8003a34:	e000ed04 	.word	0xe000ed04

08003a38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <xTaskGetTickCount+0x1c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003a44:	687b      	ldr	r3, [r7, #4]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	1fff09c8 	.word	0x1fff09c8

08003a58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a62:	4b4f      	ldr	r3, [pc, #316]	; (8003ba0 <xTaskIncrementTick+0x148>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f040 808f 	bne.w	8003b8a <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a6c:	4b4d      	ldr	r3, [pc, #308]	; (8003ba4 <xTaskIncrementTick+0x14c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3301      	adds	r3, #1
 8003a72:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003a74:	4a4b      	ldr	r2, [pc, #300]	; (8003ba4 <xTaskIncrementTick+0x14c>)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d11f      	bne.n	8003ac0 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8003a80:	4b49      	ldr	r3, [pc, #292]	; (8003ba8 <xTaskIncrementTick+0x150>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <xTaskIncrementTick+0x46>
 8003a8a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	e7fe      	b.n	8003a9c <xTaskIncrementTick+0x44>
 8003a9e:	4b42      	ldr	r3, [pc, #264]	; (8003ba8 <xTaskIncrementTick+0x150>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	4b41      	ldr	r3, [pc, #260]	; (8003bac <xTaskIncrementTick+0x154>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a3f      	ldr	r2, [pc, #252]	; (8003ba8 <xTaskIncrementTick+0x150>)
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4a3f      	ldr	r2, [pc, #252]	; (8003bac <xTaskIncrementTick+0x154>)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	4b3f      	ldr	r3, [pc, #252]	; (8003bb0 <xTaskIncrementTick+0x158>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	4a3d      	ldr	r2, [pc, #244]	; (8003bb0 <xTaskIncrementTick+0x158>)
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	f000 fab8 	bl	8004030 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003ac0:	4b3c      	ldr	r3, [pc, #240]	; (8003bb4 <xTaskIncrementTick+0x15c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d34a      	bcc.n	8003b60 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aca:	4b37      	ldr	r3, [pc, #220]	; (8003ba8 <xTaskIncrementTick+0x150>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d104      	bne.n	8003ade <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ad4:	4b37      	ldr	r3, [pc, #220]	; (8003bb4 <xTaskIncrementTick+0x15c>)
 8003ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8003ada:	601a      	str	r2, [r3, #0]
                    break;
 8003adc:	e040      	b.n	8003b60 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ade:	4b32      	ldr	r3, [pc, #200]	; (8003ba8 <xTaskIncrementTick+0x150>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d203      	bcs.n	8003afe <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003af6:	4a2f      	ldr	r2, [pc, #188]	; (8003bb4 <xTaskIncrementTick+0x15c>)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003afc:	e030      	b.n	8003b60 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	3304      	adds	r3, #4
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe ff68 	bl	80029d8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d004      	beq.n	8003b1a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	3318      	adds	r3, #24
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fe ff5f 	bl	80029d8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2301      	movs	r3, #1
 8003b22:	fa03 f202 	lsl.w	r2, r3, r2
 8003b26:	4b24      	ldr	r3, [pc, #144]	; (8003bb8 <xTaskIncrementTick+0x160>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	4a22      	ldr	r2, [pc, #136]	; (8003bb8 <xTaskIncrementTick+0x160>)
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4a1f      	ldr	r2, [pc, #124]	; (8003bbc <xTaskIncrementTick+0x164>)
 8003b3e:	441a      	add	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	3304      	adds	r3, #4
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	f7fe feea 	bl	8002920 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b50:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <xTaskIncrementTick+0x168>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d301      	bcc.n	8003b5e <xTaskIncrementTick+0x106>
                            {
                                xSwitchRequired = pdTRUE;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	617b      	str	r3, [r7, #20]
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                    #endif /* configUSE_PREEMPTION */
                }
            }
 8003b5e:	e7b4      	b.n	8003aca <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b60:	4b17      	ldr	r3, [pc, #92]	; (8003bc0 <xTaskIncrementTick+0x168>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b66:	4915      	ldr	r1, [pc, #84]	; (8003bbc <xTaskIncrementTick+0x164>)
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d901      	bls.n	8003b7c <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003b7c:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <xTaskIncrementTick+0x16c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <xTaskIncrementTick+0x130>
                {
                    xSwitchRequired = pdTRUE;
 8003b84:	2301      	movs	r3, #1
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	e004      	b.n	8003b94 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003b8a:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <xTaskIncrementTick+0x170>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	4a0d      	ldr	r2, [pc, #52]	; (8003bc8 <xTaskIncrementTick+0x170>)
 8003b92:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003b94:	697b      	ldr	r3, [r7, #20]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	1fff09ec 	.word	0x1fff09ec
 8003ba4:	1fff09c8 	.word	0x1fff09c8
 8003ba8:	1fff097c 	.word	0x1fff097c
 8003bac:	1fff0980 	.word	0x1fff0980
 8003bb0:	1fff09dc 	.word	0x1fff09dc
 8003bb4:	1fff09e4 	.word	0x1fff09e4
 8003bb8:	1fff09cc 	.word	0x1fff09cc
 8003bbc:	1fff08f0 	.word	0x1fff08f0
 8003bc0:	1fff08ec 	.word	0x1fff08ec
 8003bc4:	1fff09d8 	.word	0x1fff09d8
 8003bc8:	1fff09d4 	.word	0x1fff09d4

08003bcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bd2:	4b26      	ldr	r3, [pc, #152]	; (8003c6c <vTaskSwitchContext+0xa0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003bda:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <vTaskSwitchContext+0xa4>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	e03e      	b.n	8003c60 <vTaskSwitchContext+0x94>
    }
    else
    {
        xYieldPending = pdFALSE;
 8003be2:	4b23      	ldr	r3, [pc, #140]	; (8003c70 <vTaskSwitchContext+0xa4>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003be8:	4b22      	ldr	r3, [pc, #136]	; (8003c74 <vTaskSwitchContext+0xa8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	60fb      	str	r3, [r7, #12]
/* Generic helper function. */
        __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
        {
            uint8_t ucReturn;

            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	fab3 f383 	clz	r3, r3
 8003bf4:	72fb      	strb	r3, [r7, #11]

            return ucReturn;
 8003bf6:	7afb      	ldrb	r3, [r7, #11]
 8003bf8:	f1c3 031f 	rsb	r3, r3, #31
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	491e      	ldr	r1, [pc, #120]	; (8003c78 <vTaskSwitchContext+0xac>)
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <vTaskSwitchContext+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003c12:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003c16:	f383 8811 	msr	BASEPRI, r3
 8003c1a:	f3bf 8f6f 	isb	sy
 8003c1e:	f3bf 8f4f 	dsb	sy
 8003c22:	607b      	str	r3, [r7, #4]
 8003c24:	e7fe      	b.n	8003c24 <vTaskSwitchContext+0x58>
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4a11      	ldr	r2, [pc, #68]	; (8003c78 <vTaskSwitchContext+0xac>)
 8003c32:	4413      	add	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	605a      	str	r2, [r3, #4]
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	3308      	adds	r3, #8
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d104      	bne.n	8003c56 <vTaskSwitchContext+0x8a>
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4a07      	ldr	r2, [pc, #28]	; (8003c7c <vTaskSwitchContext+0xb0>)
 8003c5e:	6013      	str	r3, [r2, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	1fff09ec 	.word	0x1fff09ec
 8003c70:	1fff09d8 	.word	0x1fff09d8
 8003c74:	1fff09cc 	.word	0x1fff09cc
 8003c78:	1fff08f0 	.word	0x1fff08f0
 8003c7c:	1fff08ec 	.word	0x1fff08ec

08003c80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d109      	bne.n	8003ca4 <vTaskPlaceOnEventList+0x24>
 8003c90:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	e7fe      	b.n	8003ca2 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ca4:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <vTaskPlaceOnEventList+0x40>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3318      	adds	r3, #24
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	4619      	mov	r1, r3
 8003cae:	f7fe fe5b 	bl	8002968 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cb2:	6838      	ldr	r0, [r7, #0]
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	f000 fa6d 	bl	8004194 <prvAddCurrentTaskToDelayedList>
}
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	1fff08ec 	.word	0x1fff08ec

08003cc4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <vTaskPlaceOnEventListRestricted+0x26>
 8003cd6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	e7fe      	b.n	8003ce8 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cea:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <vTaskPlaceOnEventListRestricted+0x50>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3318      	adds	r3, #24
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	f7fe fe14 	bl	8002920 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 8003cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003d02:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d04:	68b8      	ldr	r0, [r7, #8]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	f000 fa44 	bl	8004194 <prvAddCurrentTaskToDelayedList>
    }
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	1fff08ec 	.word	0x1fff08ec

08003d18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <xTaskRemoveFromEventList+0x2a>
 8003d2e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	e7fe      	b.n	8003d40 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	3318      	adds	r3, #24
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe fe46 	bl	80029d8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d4c:	4b1e      	ldr	r3, [pc, #120]	; (8003dc8 <xTaskRemoveFromEventList+0xb0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d11e      	bne.n	8003d92 <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fe fe3d 	bl	80029d8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	461a      	mov	r2, r3
 8003d64:	2301      	movs	r3, #1
 8003d66:	fa03 f202 	lsl.w	r2, r3, r2
 8003d6a:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <xTaskRemoveFromEventList+0xb4>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	4a16      	ldr	r2, [pc, #88]	; (8003dcc <xTaskRemoveFromEventList+0xb4>)
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <xTaskRemoveFromEventList+0xb8>)
 8003d82:	441a      	add	r2, r3
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	3304      	adds	r3, #4
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f7fe fdc8 	bl	8002920 <vListInsertEnd>
 8003d90:	e005      	b.n	8003d9e <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	3318      	adds	r3, #24
 8003d96:	480f      	ldr	r0, [pc, #60]	; (8003dd4 <xTaskRemoveFromEventList+0xbc>)
 8003d98:	4619      	mov	r1, r3
 8003d9a:	f7fe fdc1 	bl	8002920 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da2:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <xTaskRemoveFromEventList+0xc0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d905      	bls.n	8003db8 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003dac:	2301      	movs	r3, #1
 8003dae:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003db0:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <xTaskRemoveFromEventList+0xc4>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e001      	b.n	8003dbc <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003dbc:	697b      	ldr	r3, [r7, #20]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	1fff09ec 	.word	0x1fff09ec
 8003dcc:	1fff09cc 	.word	0x1fff09cc
 8003dd0:	1fff08f0 	.word	0x1fff08f0
 8003dd4:	1fff0984 	.word	0x1fff0984
 8003dd8:	1fff08ec 	.word	0x1fff08ec
 8003ddc:	1fff09d8 	.word	0x1fff09d8

08003de0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <vTaskInternalSetTimeOutState+0x24>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <vTaskInternalSetTimeOutState+0x28>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	605a      	str	r2, [r3, #4]
}
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	1fff09dc 	.word	0x1fff09dc
 8003e08:	1fff09c8 	.word	0x1fff09c8

08003e0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d109      	bne.n	8003e30 <xTaskCheckForTimeOut+0x24>
 8003e1c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	e7fe      	b.n	8003e2e <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <xTaskCheckForTimeOut+0x3e>
 8003e36:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	e7fe      	b.n	8003e48 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8003e4a:	f7fe fc03 	bl	8002654 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003e4e:	4b26      	ldr	r3, [pc, #152]	; (8003ee8 <xTaskCheckForTimeOut+0xdc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	617b      	str	r3, [r7, #20]

        #if ( INCLUDE_xTaskAbortDelay == 1 )
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8003e5e:	4b23      	ldr	r3, [pc, #140]	; (8003eec <xTaskCheckForTimeOut+0xe0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d007      	beq.n	8003e7a <xTaskCheckForTimeOut+0x6e>
            {
                /* The delay was aborted, which is not the same as a time out,
                 * but has the same result. */
                pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003e6a:	4b20      	ldr	r3, [pc, #128]	; (8003eec <xTaskCheckForTimeOut+0xe0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
                xReturn = pdTRUE;
 8003e74:	2301      	movs	r3, #1
 8003e76:	61fb      	str	r3, [r7, #28]
 8003e78:	e02e      	b.n	8003ed8 <xTaskCheckForTimeOut+0xcc>
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e82:	d102      	bne.n	8003e8a <xTaskCheckForTimeOut+0x7e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	e026      	b.n	8003ed8 <xTaskCheckForTimeOut+0xcc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4b18      	ldr	r3, [pc, #96]	; (8003ef0 <xTaskCheckForTimeOut+0xe4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d00a      	beq.n	8003eac <xTaskCheckForTimeOut+0xa0>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d805      	bhi.n	8003eac <xTaskCheckForTimeOut+0xa0>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e015      	b.n	8003ed8 <xTaskCheckForTimeOut+0xcc>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d90b      	bls.n	8003ece <xTaskCheckForTimeOut+0xc2>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	1ad2      	subs	r2, r2, r3
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff ff8c 	bl	8003de0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61fb      	str	r3, [r7, #28]
 8003ecc:	e004      	b.n	8003ed8 <xTaskCheckForTimeOut+0xcc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003ed8:	f7fe fbea 	bl	80026b0 <vPortExitCritical>

    return xReturn;
 8003edc:	69fb      	ldr	r3, [r7, #28]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3720      	adds	r7, #32
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	1fff09c8 	.word	0x1fff09c8
 8003eec:	1fff08ec 	.word	0x1fff08ec
 8003ef0:	1fff09dc 	.word	0x1fff09dc

08003ef4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003ef8:	4b03      	ldr	r3, [pc, #12]	; (8003f08 <vTaskMissedYield+0x14>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
}
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	1fff09d8 	.word	0x1fff09d8

08003f0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003f14:	f000 f850 	bl	8003fb8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <prvIdleTask+0x28>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d907      	bls.n	8003f30 <prvIdleTask+0x24>
                {
                    taskYIELD();
 8003f20:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <prvIdleTask+0x2c>)
 8003f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	f3bf 8f6f 	isb	sy
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_TICKLESS_IDLE */
    }
 8003f30:	e7f0      	b.n	8003f14 <prvIdleTask+0x8>
 8003f32:	bf00      	nop
 8003f34:	1fff08f0 	.word	0x1fff08f0
 8003f38:	e000ed04 	.word	0xe000ed04

08003f3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f42:	2300      	movs	r3, #0
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	e00c      	b.n	8003f62 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4a11      	ldr	r2, [pc, #68]	; (8003f98 <prvInitialiseTaskLists+0x5c>)
 8003f54:	4413      	add	r3, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe fcb6 	bl	80028c8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	607b      	str	r3, [r7, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d9ef      	bls.n	8003f48 <prvInitialiseTaskLists+0xc>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    }

    vListInitialise( &xDelayedTaskList1 );
 8003f68:	480c      	ldr	r0, [pc, #48]	; (8003f9c <prvInitialiseTaskLists+0x60>)
 8003f6a:	f7fe fcad 	bl	80028c8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003f6e:	480c      	ldr	r0, [pc, #48]	; (8003fa0 <prvInitialiseTaskLists+0x64>)
 8003f70:	f7fe fcaa 	bl	80028c8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003f74:	480b      	ldr	r0, [pc, #44]	; (8003fa4 <prvInitialiseTaskLists+0x68>)
 8003f76:	f7fe fca7 	bl	80028c8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003f7a:	480b      	ldr	r0, [pc, #44]	; (8003fa8 <prvInitialiseTaskLists+0x6c>)
 8003f7c:	f7fe fca4 	bl	80028c8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003f80:	480a      	ldr	r0, [pc, #40]	; (8003fac <prvInitialiseTaskLists+0x70>)
 8003f82:	f7fe fca1 	bl	80028c8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003f86:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <prvInitialiseTaskLists+0x74>)
 8003f88:	4a04      	ldr	r2, [pc, #16]	; (8003f9c <prvInitialiseTaskLists+0x60>)
 8003f8a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f8c:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <prvInitialiseTaskLists+0x78>)
 8003f8e:	4a04      	ldr	r2, [pc, #16]	; (8003fa0 <prvInitialiseTaskLists+0x64>)
 8003f90:	601a      	str	r2, [r3, #0]
}
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	1fff08f0 	.word	0x1fff08f0
 8003f9c:	1fff0954 	.word	0x1fff0954
 8003fa0:	1fff0968 	.word	0x1fff0968
 8003fa4:	1fff0984 	.word	0x1fff0984
 8003fa8:	1fff0998 	.word	0x1fff0998
 8003fac:	1fff09b0 	.word	0x1fff09b0
 8003fb0:	1fff097c 	.word	0x1fff097c
 8003fb4:	1fff0980 	.word	0x1fff0980

08003fb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fbe:	e019      	b.n	8003ff4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003fc0:	f7fe fb48 	bl	8002654 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <prvCheckTasksWaitingTermination+0x4c>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fe fd01 	bl	80029d8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003fd6:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <prvCheckTasksWaitingTermination+0x50>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	4a0a      	ldr	r2, [pc, #40]	; (8004008 <prvCheckTasksWaitingTermination+0x50>)
 8003fde:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	; (800400c <prvCheckTasksWaitingTermination+0x54>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	4a09      	ldr	r2, [pc, #36]	; (800400c <prvCheckTasksWaitingTermination+0x54>)
 8003fe8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003fea:	f7fe fb61 	bl	80026b0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f80e 	bl	8004010 <prvDeleteTCB>
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ff4:	4b05      	ldr	r3, [pc, #20]	; (800400c <prvCheckTasksWaitingTermination+0x54>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e1      	bne.n	8003fc0 <prvCheckTasksWaitingTermination+0x8>

                prvDeleteTCB( pxTCB );
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	1fff0998 	.word	0x1fff0998
 8004008:	1fff09c4 	.word	0x1fff09c4
 800400c:	1fff09ac 	.word	0x1fff09ac

08004010 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	4618      	mov	r0, r3
 800401e:	f7fe fc41 	bl	80028a4 <vPortFree>
                vPortFree( pxTCB );
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fe fc3e 	bl	80028a4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop

08004030 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004034:	4b09      	ldr	r3, [pc, #36]	; (800405c <prvResetNextTaskUnblockTime+0x2c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d104      	bne.n	8004048 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800403e:	4b08      	ldr	r3, [pc, #32]	; (8004060 <prvResetNextTaskUnblockTime+0x30>)
 8004040:	f04f 32ff 	mov.w	r2, #4294967295
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e005      	b.n	8004054 <prvResetNextTaskUnblockTime+0x24>
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <prvResetNextTaskUnblockTime+0x2c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a03      	ldr	r2, [pc, #12]	; (8004060 <prvResetNextTaskUnblockTime+0x30>)
 8004052:	6013      	str	r3, [r2, #0]
    }
}
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	1fff097c 	.word	0x1fff097c
 8004060:	1fff09e4 	.word	0x1fff09e4

08004064 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800406a:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <xTaskGetSchedulerState+0x34>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d102      	bne.n	8004078 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004072:	2301      	movs	r3, #1
 8004074:	607b      	str	r3, [r7, #4]
 8004076:	e008      	b.n	800408a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004078:	4b08      	ldr	r3, [pc, #32]	; (800409c <xTaskGetSchedulerState+0x38>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004080:	2302      	movs	r3, #2
 8004082:	607b      	str	r3, [r7, #4]
 8004084:	e001      	b.n	800408a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004086:	2300      	movs	r3, #0
 8004088:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800408a:	687b      	ldr	r3, [r7, #4]
    }
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	1fff09d0 	.word	0x1fff09d0
 800409c:	1fff09ec 	.word	0x1fff09ec

080040a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d063      	beq.n	800417e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80040b6:	4b34      	ldr	r3, [pc, #208]	; (8004188 <xTaskPriorityDisinherit+0xe8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d009      	beq.n	80040d4 <xTaskPriorityDisinherit+0x34>
 80040c0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	e7fe      	b.n	80040d2 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d109      	bne.n	80040f0 <xTaskPriorityDisinherit+0x50>
 80040dc:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	e7fe      	b.n	80040ee <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f4:	1e5a      	subs	r2, r3, #1
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004102:	429a      	cmp	r2, r3
 8004104:	d03b      	beq.n	800417e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410a:	2b00      	cmp	r3, #0
 800410c:	d137      	bne.n	800417e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	3304      	adds	r3, #4
 8004112:	4618      	mov	r0, r3
 8004114:	f7fe fc60 	bl	80029d8 <uxListRemove>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10a      	bne.n	8004134 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	461a      	mov	r2, r3
 8004124:	2301      	movs	r3, #1
 8004126:	4093      	lsls	r3, r2
 8004128:	43da      	mvns	r2, r3
 800412a:	4b18      	ldr	r3, [pc, #96]	; (800418c <xTaskPriorityDisinherit+0xec>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4013      	ands	r3, r2
 8004130:	4a16      	ldr	r2, [pc, #88]	; (800418c <xTaskPriorityDisinherit+0xec>)
 8004132:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	f1c3 0205 	rsb	r2, r3, #5
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	461a      	mov	r2, r3
 800414e:	2301      	movs	r3, #1
 8004150:	fa03 f202 	lsl.w	r2, r3, r2
 8004154:	4b0d      	ldr	r3, [pc, #52]	; (800418c <xTaskPriorityDisinherit+0xec>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4313      	orrs	r3, r2
 800415a:	4a0c      	ldr	r2, [pc, #48]	; (800418c <xTaskPriorityDisinherit+0xec>)
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4a09      	ldr	r2, [pc, #36]	; (8004190 <xTaskPriorityDisinherit+0xf0>)
 800416c:	441a      	add	r2, r3
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	3304      	adds	r3, #4
 8004172:	4610      	mov	r0, r2
 8004174:	4619      	mov	r1, r3
 8004176:	f7fe fbd3 	bl	8002920 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800417a:	2301      	movs	r3, #1
 800417c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800417e:	697b      	ldr	r3, [r7, #20]
    }
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	1fff08ec 	.word	0x1fff08ec
 800418c:	1fff09cc 	.word	0x1fff09cc
 8004190:	1fff08f0 	.word	0x1fff08f0

08004194 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800419e:	4b2b      	ldr	r3, [pc, #172]	; (800424c <prvAddCurrentTaskToDelayedList+0xb8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            /* About to enter a delayed list, so ensure the ucDelayAborted flag is
             * reset to pdFALSE so it can be detected as having been set to pdTRUE
             * when the task leaves the Blocked state. */
            pxCurrentTCB->ucDelayAborted = pdFALSE;
 80041a4:	4b2a      	ldr	r3, [pc, #168]	; (8004250 <prvAddCurrentTaskToDelayedList+0xbc>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041ae:	4b28      	ldr	r3, [pc, #160]	; (8004250 <prvAddCurrentTaskToDelayedList+0xbc>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3304      	adds	r3, #4
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fe fc0f 	bl	80029d8 <uxListRemove>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10b      	bne.n	80041d8 <prvAddCurrentTaskToDelayedList+0x44>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80041c0:	4b23      	ldr	r3, [pc, #140]	; (8004250 <prvAddCurrentTaskToDelayedList+0xbc>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c6:	461a      	mov	r2, r3
 80041c8:	2301      	movs	r3, #1
 80041ca:	4093      	lsls	r3, r2
 80041cc:	43da      	mvns	r2, r3
 80041ce:	4b21      	ldr	r3, [pc, #132]	; (8004254 <prvAddCurrentTaskToDelayedList+0xc0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4013      	ands	r3, r2
 80041d4:	4a1f      	ldr	r2, [pc, #124]	; (8004254 <prvAddCurrentTaskToDelayedList+0xc0>)
 80041d6:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041de:	d10a      	bne.n	80041f6 <prvAddCurrentTaskToDelayedList+0x62>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d007      	beq.n	80041f6 <prvAddCurrentTaskToDelayedList+0x62>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041e6:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <prvAddCurrentTaskToDelayedList+0xbc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3304      	adds	r3, #4
 80041ec:	481a      	ldr	r0, [pc, #104]	; (8004258 <prvAddCurrentTaskToDelayedList+0xc4>)
 80041ee:	4619      	mov	r1, r3
 80041f0:	f7fe fb96 	bl	8002920 <vListInsertEnd>
 80041f4:	e026      	b.n	8004244 <prvAddCurrentTaskToDelayedList+0xb0>
            else
            {
                /* Calculate the time at which the task should be woken if the event
                 * does not occur.  This may overflow but this doesn't matter, the
                 * kernel will manage it correctly. */
                xTimeToWake = xConstTickCount + xTicksToWait;
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4413      	add	r3, r2
 80041fc:	60bb      	str	r3, [r7, #8]

                /* The list item will be inserted in wake time order. */
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041fe:	4b14      	ldr	r3, [pc, #80]	; (8004250 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	605a      	str	r2, [r3, #4]

                if( xTimeToWake < xConstTickCount )
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	429a      	cmp	r2, r3
 800420c:	d209      	bcs.n	8004222 <prvAddCurrentTaskToDelayedList+0x8e>
                {
                    /* Wake time has overflowed.  Place this item in the overflow
                     * list. */
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800420e:	4b13      	ldr	r3, [pc, #76]	; (800425c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3304      	adds	r3, #4
 8004218:	4610      	mov	r0, r2
 800421a:	4619      	mov	r1, r3
 800421c:	f7fe fba4 	bl	8002968 <vListInsert>
 8004220:	e010      	b.n	8004244 <prvAddCurrentTaskToDelayedList+0xb0>
                }
                else
                {
                    /* The wake time has not overflowed, so the current block list
                     * is used. */
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004222:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3304      	adds	r3, #4
 800422c:	4610      	mov	r0, r2
 800422e:	4619      	mov	r1, r3
 8004230:	f7fe fb9a 	bl	8002968 <vListInsert>

                    /* If the task entering the blocked state was placed at the
                     * head of the list of blocked tasks then xNextTaskUnblockTime
                     * needs to be updated too. */
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <prvAddCurrentTaskToDelayedList+0xd0>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	429a      	cmp	r2, r3
 800423c:	d202      	bcs.n	8004244 <prvAddCurrentTaskToDelayedList+0xb0>
                    {
                        xNextTaskUnblockTime = xTimeToWake;
 800423e:	4a09      	ldr	r2, [pc, #36]	; (8004264 <prvAddCurrentTaskToDelayedList+0xd0>)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	6013      	str	r3, [r2, #0]

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	1fff09c8 	.word	0x1fff09c8
 8004250:	1fff08ec 	.word	0x1fff08ec
 8004254:	1fff09cc 	.word	0x1fff09cc
 8004258:	1fff09b0 	.word	0x1fff09b0
 800425c:	1fff0980 	.word	0x1fff0980
 8004260:	1fff097c 	.word	0x1fff097c
 8004264:	1fff09e4 	.word	0x1fff09e4

08004268 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800426e:	2300      	movs	r3, #0
 8004270:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004272:	f000 faf3 	bl	800485c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <xTimerCreateTimerTask+0x54>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00b      	beq.n	8004296 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800427e:	2302      	movs	r3, #2
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <xTimerCreateTimerTask+0x58>)
 8004284:	9301      	str	r3, [sp, #4]
 8004286:	480f      	ldr	r0, [pc, #60]	; (80042c4 <xTimerCreateTimerTask+0x5c>)
 8004288:	490f      	ldr	r1, [pc, #60]	; (80042c8 <xTimerCreateTimerTask+0x60>)
 800428a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800428e:	2300      	movs	r3, #0
 8004290:	f7ff f954 	bl	800353c <xTaskCreate>
 8004294:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d109      	bne.n	80042b0 <xTimerCreateTimerTask+0x48>
 800429c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80042a0:	f383 8811 	msr	BASEPRI, r3
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	e7fe      	b.n	80042ae <xTimerCreateTimerTask+0x46>
        return xReturn;
 80042b0:	687b      	ldr	r3, [r7, #4]
    }
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	1fff0a20 	.word	0x1fff0a20
 80042c0:	1fff0a24 	.word	0x1fff0a24
 80042c4:	08004409 	.word	0x08004409
 80042c8:	0800513c 	.word	0x0800513c

080042cc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	; 0x28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80042da:	2300      	movs	r3, #0
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d109      	bne.n	80042f8 <xTimerGenericCommand+0x2c>
 80042e4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	623b      	str	r3, [r7, #32]
 80042f6:	e7fe      	b.n	80042f6 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80042f8:	4b1c      	ldr	r3, [pc, #112]	; (800436c <xTimerGenericCommand+0xa0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d030      	beq.n	8004362 <xTimerGenericCommand+0x96>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	61bb      	str	r3, [r7, #24]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b05      	cmp	r3, #5
 8004310:	dc1c      	bgt.n	800434c <xTimerGenericCommand+0x80>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004312:	f7ff fea7 	bl	8004064 <xTaskGetSchedulerState>
 8004316:	4603      	mov	r3, r0
 8004318:	2b02      	cmp	r3, #2
 800431a:	d10b      	bne.n	8004334 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800431c:	4b13      	ldr	r3, [pc, #76]	; (800436c <xTimerGenericCommand+0xa0>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	f107 0310 	add.w	r3, r7, #16
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432a:	2300      	movs	r3, #0
 800432c:	f7fe fc6a 	bl	8002c04 <xQueueGenericSend>
 8004330:	6278      	str	r0, [r7, #36]	; 0x24
 8004332:	e016      	b.n	8004362 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004334:	4b0d      	ldr	r3, [pc, #52]	; (800436c <xTimerGenericCommand+0xa0>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	f107 0310 	add.w	r3, r7, #16
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	2200      	movs	r2, #0
 8004342:	2300      	movs	r3, #0
 8004344:	f7fe fc5e 	bl	8002c04 <xQueueGenericSend>
 8004348:	6278      	str	r0, [r7, #36]	; 0x24
 800434a:	e00a      	b.n	8004362 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800434c:	4b07      	ldr	r3, [pc, #28]	; (800436c <xTimerGenericCommand+0xa0>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	f107 0310 	add.w	r3, r7, #16
 8004354:	4610      	mov	r0, r2
 8004356:	4619      	mov	r1, r3
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	2300      	movs	r3, #0
 800435c:	f7fe fd6e 	bl	8002e3c <xQueueGenericSendFromISR>
 8004360:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004364:	4618      	mov	r0, r3
 8004366:	3728      	adds	r7, #40	; 0x28
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	1fff0a20 	.word	0x1fff0a20

08004370 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af02      	add	r7, sp, #8
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800437a:	4b22      	ldr	r3, [pc, #136]	; (8004404 <prvProcessExpiredTimer+0x94>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	3304      	adds	r3, #4
 8004388:	4618      	mov	r0, r3
 800438a:	f7fe fb25 	bl	80029d8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d022      	beq.n	80043e2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	699a      	ldr	r2, [r3, #24]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4413      	add	r3, r2
 80043a4:	6978      	ldr	r0, [r7, #20]
 80043a6:	4619      	mov	r1, r3
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f000 f8d0 	bl	8004550 <prvInsertTimerInActiveList>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d01e      	beq.n	80043f4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043b6:	2300      	movs	r3, #0
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	6978      	ldr	r0, [r7, #20]
 80043bc:	2100      	movs	r1, #0
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	2300      	movs	r3, #0
 80043c2:	f7ff ff83 	bl	80042cc <xTimerGenericCommand>
 80043c6:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d112      	bne.n	80043f4 <prvProcessExpiredTimer+0x84>
 80043ce:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	e7fe      	b.n	80043e0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	6978      	ldr	r0, [r7, #20]
 80043fa:	4798      	blx	r3
    }
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	1fff0a18 	.word	0x1fff0a18

08004408 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004410:	f107 0308 	add.w	r3, r7, #8
 8004414:	4618      	mov	r0, r3
 8004416:	f000 f857 	bl	80044c8 <prvGetNextExpireTime>
 800441a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	4619      	mov	r1, r3
 8004422:	f000 f803 	bl	800442c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004426:	f000 f8d5 	bl	80045d4 <prvProcessReceivedCommands>
        }
 800442a:	e7f1      	b.n	8004410 <prvTimerTask+0x8>

0800442c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004436:	f7ff fa53 	bl	80038e0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800443a:	f107 0308 	add.w	r3, r7, #8
 800443e:	4618      	mov	r0, r3
 8004440:	f000 f866 	bl	8004510 <prvSampleTimeNow>
 8004444:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d131      	bne.n	80044b0 <prvProcessTimerOrBlockTask+0x84>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <prvProcessTimerOrBlockTask+0x3c>
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	429a      	cmp	r2, r3
 8004458:	d806      	bhi.n	8004468 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800445a:	f7ff fa4f 	bl	80038fc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	68f9      	ldr	r1, [r7, #12]
 8004462:	f7ff ff85 	bl	8004370 <prvProcessExpiredTimer>
 8004466:	e025      	b.n	80044b4 <prvProcessTimerOrBlockTask+0x88>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d008      	beq.n	8004480 <prvProcessTimerOrBlockTask+0x54>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800446e:	4b13      	ldr	r3, [pc, #76]	; (80044bc <prvProcessTimerOrBlockTask+0x90>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <prvProcessTimerOrBlockTask+0x50>
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <prvProcessTimerOrBlockTask+0x52>
 800447c:	2300      	movs	r3, #0
 800447e:	603b      	str	r3, [r7, #0]
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004480:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <prvProcessTimerOrBlockTask+0x94>)
 8004482:	6819      	ldr	r1, [r3, #0]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	4608      	mov	r0, r1
 800448c:	4619      	mov	r1, r3
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	f7fe ffb8 	bl	8003404 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
 8004494:	f7ff fa32 	bl	80038fc <xTaskResumeAll>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <prvProcessTimerOrBlockTask+0x88>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <prvProcessTimerOrBlockTask+0x98>)
 80044a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	e001      	b.n	80044b4 <prvProcessTimerOrBlockTask+0x88>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
 80044b0:	f7ff fa24 	bl	80038fc <xTaskResumeAll>
            }
        }
    }
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	1fff0a1c 	.word	0x1fff0a1c
 80044c0:	1fff0a20 	.word	0x1fff0a20
 80044c4:	e000ed04 	.word	0xe000ed04

080044c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80044d0:	4b0e      	ldr	r3, [pc, #56]	; (800450c <prvGetNextExpireTime+0x44>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <prvGetNextExpireTime+0x16>
 80044da:	2201      	movs	r2, #1
 80044dc:	e000      	b.n	80044e0 <prvGetNextExpireTime+0x18>
 80044de:	2200      	movs	r2, #0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d105      	bne.n	80044f8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044ec:	4b07      	ldr	r3, [pc, #28]	; (800450c <prvGetNextExpireTime+0x44>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	e001      	b.n	80044fc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80044fc:	68fb      	ldr	r3, [r7, #12]
    }
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	1fff0a18 	.word	0x1fff0a18

08004510 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004518:	f7ff fa8e 	bl	8003a38 <xTaskGetTickCount>
 800451c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800451e:	4b0b      	ldr	r3, [pc, #44]	; (800454c <prvSampleTimeNow+0x3c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	429a      	cmp	r2, r3
 8004526:	d205      	bcs.n	8004534 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004528:	f000 f936 	bl	8004798 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	e002      	b.n	800453a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800453a:	4a04      	ldr	r2, [pc, #16]	; (800454c <prvSampleTimeNow+0x3c>)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004540:	68fb      	ldr	r3, [r7, #12]
    }
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	1fff0a28 	.word	0x1fff0a28

08004550 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	429a      	cmp	r2, r3
 8004574:	d812      	bhi.n	800459c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	1ad2      	subs	r2, r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	429a      	cmp	r2, r3
 8004582:	d302      	bcc.n	800458a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004584:	2301      	movs	r3, #1
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	e01b      	b.n	80045c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800458a:	4b10      	ldr	r3, [pc, #64]	; (80045cc <prvInsertTimerInActiveList+0x7c>)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3304      	adds	r3, #4
 8004592:	4610      	mov	r0, r2
 8004594:	4619      	mov	r1, r3
 8004596:	f7fe f9e7 	bl	8002968 <vListInsert>
 800459a:	e012      	b.n	80045c2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d206      	bcs.n	80045b2 <prvInsertTimerInActiveList+0x62>
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d302      	bcc.n	80045b2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80045ac:	2301      	movs	r3, #1
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	e007      	b.n	80045c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045b2:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <prvInsertTimerInActiveList+0x80>)
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4610      	mov	r0, r2
 80045bc:	4619      	mov	r1, r3
 80045be:	f7fe f9d3 	bl	8002968 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80045c2:	697b      	ldr	r3, [r7, #20]
    }
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	1fff0a1c 	.word	0x1fff0a1c
 80045d0:	1fff0a18 	.word	0x1fff0a18

080045d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08e      	sub	sp, #56	; 0x38
 80045d8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045da:	e0cb      	b.n	8004774 <prvProcessReceivedCommands+0x1a0>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	da18      	bge.n	8004614 <prvProcessReceivedCommands+0x40>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80045e2:	1d3b      	adds	r3, r7, #4
 80045e4:	3304      	adds	r3, #4
 80045e6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 80045e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <prvProcessReceivedCommands+0x2e>
 80045ee:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	61fb      	str	r3, [r7, #28]
 8004600:	e7fe      	b.n	8004600 <prvProcessReceivedCommands+0x2c>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004608:	6851      	ldr	r1, [r2, #4]
 800460a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800460c:	6892      	ldr	r2, [r2, #8]
 800460e:	4608      	mov	r0, r1
 8004610:	4611      	mov	r1, r2
 8004612:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	f2c0 80ac 	blt.w	8004774 <prvProcessReceivedCommands+0x1a0>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	62bb      	str	r3, [r7, #40]	; 0x28

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d004      	beq.n	8004632 <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462a:	3304      	adds	r3, #4
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe f9d3 	bl	80029d8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004632:	463b      	mov	r3, r7
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ff6b 	bl	8004510 <prvSampleTimeNow>
 800463a:	6278      	str	r0, [r7, #36]	; 0x24

                switch( xMessage.xMessageID )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b09      	cmp	r3, #9
 8004640:	f200 8097 	bhi.w	8004772 <prvProcessReceivedCommands+0x19e>
 8004644:	a201      	add	r2, pc, #4	; (adr r2, 800464c <prvProcessReceivedCommands+0x78>)
 8004646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464a:	bf00      	nop
 800464c:	08004675 	.word	0x08004675
 8004650:	08004675 	.word	0x08004675
 8004654:	08004675 	.word	0x08004675
 8004658:	080046eb 	.word	0x080046eb
 800465c:	080046ff 	.word	0x080046ff
 8004660:	08004749 	.word	0x08004749
 8004664:	08004675 	.word	0x08004675
 8004668:	08004675 	.word	0x08004675
 800466c:	080046eb 	.word	0x080046eb
 8004670:	080046ff 	.word	0x080046ff
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	b2da      	uxtb	r2, r3
 8004680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004682:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	441a      	add	r2, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004692:	4611      	mov	r1, r2
 8004694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004696:	f7ff ff5b 	bl	8004550 <prvInsertTimerInActiveList>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d023      	beq.n	80046e8 <prvProcessReceivedCommands+0x114>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046a6:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d018      	beq.n	80046e8 <prvProcessReceivedCommands+0x114>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	441a      	add	r2, r3
 80046be:	2300      	movs	r3, #0
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046c4:	2100      	movs	r1, #0
 80046c6:	2300      	movs	r3, #0
 80046c8:	f7ff fe00 	bl	80042cc <xTimerGenericCommand>
 80046cc:	6238      	str	r0, [r7, #32]
                                configASSERT( xResult );
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d109      	bne.n	80046e8 <prvProcessReceivedCommands+0x114>
 80046d4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	61bb      	str	r3, [r7, #24]
 80046e6:	e7fe      	b.n	80046e6 <prvProcessReceivedCommands+0x112>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80046e8:	e044      	b.n	8004774 <prvProcessReceivedCommands+0x1a0>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046f0:	f023 0301 	bic.w	r3, r3, #1
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80046fc:	e03a      	b.n	8004774 <prvProcessReceivedCommands+0x1a0>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	b2da      	uxtb	r2, r3
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <prvProcessReceivedCommands+0x15e>
 800471e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	e7fe      	b.n	8004730 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	4413      	add	r3, r2
 800473a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800473c:	4619      	mov	r1, r3
 800473e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	f7ff ff05 	bl	8004550 <prvInsertTimerInActiveList>
                        break;
 8004746:	e015      	b.n	8004774 <prvProcessReceivedCommands+0x1a0>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d103      	bne.n	800475e <prvProcessReceivedCommands+0x18a>
                                {
                                    vPortFree( pxTimer );
 8004756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004758:	f7fe f8a4 	bl	80028a4 <vPortFree>
 800475c:	e008      	b.n	8004770 <prvProcessReceivedCommands+0x19c>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	b2da      	uxtb	r2, r3
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004770:	e000      	b.n	8004774 <prvProcessReceivedCommands+0x1a0>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004772:	bf00      	nop
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004774:	4b07      	ldr	r3, [pc, #28]	; (8004794 <prvProcessReceivedCommands+0x1c0>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	1d3b      	adds	r3, r7, #4
 800477a:	4610      	mov	r0, r2
 800477c:	4619      	mov	r1, r3
 800477e:	2200      	movs	r2, #0
 8004780:	f7fe fc1a 	bl	8002fb8 <xQueueReceive>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	f47f af28 	bne.w	80045dc <prvProcessReceivedCommands+0x8>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
 800478c:	3730      	adds	r7, #48	; 0x30
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	1fff0a20 	.word	0x1fff0a20

08004798 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800479e:	e047      	b.n	8004830 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047a0:	4b2c      	ldr	r3, [pc, #176]	; (8004854 <prvSwitchTimerLists+0xbc>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	617b      	str	r3, [r7, #20]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047aa:	4b2a      	ldr	r3, [pc, #168]	; (8004854 <prvSwitchTimerLists+0xbc>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	613b      	str	r3, [r7, #16]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	3304      	adds	r3, #4
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fe f90d 	bl	80029d8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	6938      	ldr	r0, [r7, #16]
 80047c4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d02d      	beq.n	8004830 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	699a      	ldr	r2, [r3, #24]
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	4413      	add	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]

                if( xReloadTime > xNextExpireTime )
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d90e      	bls.n	8004804 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047f2:	4b18      	ldr	r3, [pc, #96]	; (8004854 <prvSwitchTimerLists+0xbc>)
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	3304      	adds	r3, #4
 80047fa:	4610      	mov	r0, r2
 80047fc:	4619      	mov	r1, r3
 80047fe:	f7fe f8b3 	bl	8002968 <vListInsert>
 8004802:	e015      	b.n	8004830 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004804:	2300      	movs	r3, #0
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	6938      	ldr	r0, [r7, #16]
 800480a:	2100      	movs	r1, #0
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	2300      	movs	r3, #0
 8004810:	f7ff fd5c 	bl	80042cc <xTimerGenericCommand>
 8004814:	60b8      	str	r0, [r7, #8]
                    configASSERT( xResult );
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d109      	bne.n	8004830 <prvSwitchTimerLists+0x98>
 800481c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	603b      	str	r3, [r7, #0]
 800482e:	e7fe      	b.n	800482e <prvSwitchTimerLists+0x96>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004830:	4b08      	ldr	r3, [pc, #32]	; (8004854 <prvSwitchTimerLists+0xbc>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1b2      	bne.n	80047a0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800483a:	4b06      	ldr	r3, [pc, #24]	; (8004854 <prvSwitchTimerLists+0xbc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004840:	4b05      	ldr	r3, [pc, #20]	; (8004858 <prvSwitchTimerLists+0xc0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a03      	ldr	r2, [pc, #12]	; (8004854 <prvSwitchTimerLists+0xbc>)
 8004846:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004848:	4a03      	ldr	r2, [pc, #12]	; (8004858 <prvSwitchTimerLists+0xc0>)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6013      	str	r3, [r2, #0]
    }
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	1fff0a18 	.word	0x1fff0a18
 8004858:	1fff0a1c 	.word	0x1fff0a1c

0800485c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004860:	f7fd fef8 	bl	8002654 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004864:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <prvCheckForValidListAndQueue+0x54>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d11d      	bne.n	80048a8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800486c:	4811      	ldr	r0, [pc, #68]	; (80048b4 <prvCheckForValidListAndQueue+0x58>)
 800486e:	f7fe f82b 	bl	80028c8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004872:	4811      	ldr	r0, [pc, #68]	; (80048b8 <prvCheckForValidListAndQueue+0x5c>)
 8004874:	f7fe f828 	bl	80028c8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004878:	4b10      	ldr	r3, [pc, #64]	; (80048bc <prvCheckForValidListAndQueue+0x60>)
 800487a:	4a0e      	ldr	r2, [pc, #56]	; (80048b4 <prvCheckForValidListAndQueue+0x58>)
 800487c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800487e:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <prvCheckForValidListAndQueue+0x64>)
 8004880:	4a0d      	ldr	r2, [pc, #52]	; (80048b8 <prvCheckForValidListAndQueue+0x5c>)
 8004882:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004884:	2005      	movs	r0, #5
 8004886:	2110      	movs	r1, #16
 8004888:	2200      	movs	r2, #0
 800488a:	f7fe f937 	bl	8002afc <xQueueGenericCreate>
 800488e:	4602      	mov	r2, r0
 8004890:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <prvCheckForValidListAndQueue+0x54>)
 8004892:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004894:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <prvCheckForValidListAndQueue+0x54>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800489c:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <prvCheckForValidListAndQueue+0x54>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	4908      	ldr	r1, [pc, #32]	; (80048c4 <prvCheckForValidListAndQueue+0x68>)
 80048a4:	f7fe fd86 	bl	80033b4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80048a8:	f7fd ff02 	bl	80026b0 <vPortExitCritical>
    }
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	1fff0a20 	.word	0x1fff0a20
 80048b4:	1fff09f0 	.word	0x1fff09f0
 80048b8:	1fff0a04 	.word	0x1fff0a04
 80048bc:	1fff0a18 	.word	0x1fff0a18
 80048c0:	1fff0a1c 	.word	0x1fff0a1c
 80048c4:	08005144 	.word	0x08005144

080048c8 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6819      	ldr	r1, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	7c1a      	ldrb	r2, [r3, #16]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3304      	adds	r3, #4
 80048dc:	4608      	mov	r0, r1
 80048de:	4611      	mov	r1, r2
 80048e0:	461a      	mov	r2, r3
 80048e2:	f7fb fd55 	bl	8000390 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6819      	ldr	r1, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	7c1a      	ldrb	r2, [r3, #16]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	7c5b      	ldrb	r3, [r3, #17]
 80048f2:	4608      	mov	r0, r1
 80048f4:	4611      	mov	r1, r2
 80048f6:	461a      	mov	r2, r3
 80048f8:	f7fc fb42 	bl	8000f80 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop

08004908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004918:	4b0c      	ldr	r3, [pc, #48]	; (800494c <__NVIC_SetPriorityGrouping+0x44>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004924:	4013      	ands	r3, r2
 8004926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8004930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004938:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800493a:	4a04      	ldr	r2, [pc, #16]	; (800494c <__NVIC_SetPriorityGrouping+0x44>)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	60d3      	str	r3, [r2, #12]
}
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	e000ed00 	.word	0xe000ed00

08004950 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8004956:	2001      	movs	r0, #1
 8004958:	f7ff ffd6 	bl	8004908 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800495c:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 800495e:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <SystemCoreSetup+0x94>)
 8004960:	4a21      	ldr	r2, [pc, #132]	; (80049e8 <SystemCoreSetup+0x98>)
 8004962:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004964:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004968:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800496a:	4a1e      	ldr	r2, [pc, #120]	; (80049e4 <SystemCoreSetup+0x94>)
 800496c:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <SystemCoreSetup+0x94>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004972:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004976:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800497a:	4b1c      	ldr	r3, [pc, #112]	; (80049ec <SystemCoreSetup+0x9c>)
 800497c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004980:	3314      	adds	r3, #20
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f023 030f 	bic.w	r3, r3, #15
 800498c:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f043 0304 	orr.w	r3, r3, #4
 8004994:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8004996:	4b15      	ldr	r3, [pc, #84]	; (80049ec <SystemCoreSetup+0x9c>)
 8004998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800499c:	3314      	adds	r3, #20
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80049a2:	4a10      	ldr	r2, [pc, #64]	; (80049e4 <SystemCoreSetup+0x94>)
 80049a4:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <SystemCoreSetup+0x94>)
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f023 0310 	bic.w	r3, r3, #16
 80049ac:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80049ae:	4a0d      	ldr	r2, [pc, #52]	; (80049e4 <SystemCoreSetup+0x94>)
 80049b0:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <SystemCoreSetup+0x94>)
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f023 0308 	bic.w	r3, r3, #8
 80049b8:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80049ba:	4a0a      	ldr	r2, [pc, #40]	; (80049e4 <SystemCoreSetup+0x94>)
 80049bc:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <SystemCoreSetup+0x94>)
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80049c6:	4a07      	ldr	r2, [pc, #28]	; (80049e4 <SystemCoreSetup+0x94>)
 80049c8:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <SystemCoreSetup+0x94>)
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049d0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 80049d2:	4a04      	ldr	r2, [pc, #16]	; (80049e4 <SystemCoreSetup+0x94>)
 80049d4:	4b03      	ldr	r3, [pc, #12]	; (80049e4 <SystemCoreSetup+0x94>)
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049dc:	6253      	str	r3, [r2, #36]	; 0x24
}
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	e000ed00 	.word	0xe000ed00
 80049e8:	08000000 	.word	0x08000000
 80049ec:	58001000 	.word	0x58001000

080049f0 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 80049f8:	2300      	movs	r3, #0
 80049fa:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	701a      	strb	r2, [r3, #0]

  return (status);
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8004a14:	4b02      	ldr	r3, [pc, #8]	; (8004a20 <OSCHP_GetFrequency+0x10>)
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	00b71b00 	.word	0x00b71b00

08004a24 <XMC_SCU_CLOCK_SetECATClockSource>:
 * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
 8004a2c:	4906      	ldr	r1, [pc, #24]	; (8004a48 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8004a2e:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	638b      	str	r3, [r1, #56]	; 0x38
                       ((uint32_t)source);
}
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	50004600 	.word	0x50004600

08004a4c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8004a4c:	b5b0      	push	{r4, r5, r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8004a52:	4b15      	ldr	r3, [pc, #84]	; (8004aa8 <SystemCoreClockSetup+0x5c>)
 8004a54:	1d3c      	adds	r4, r7, #4
 8004a56:	461d      	mov	r5, r3
 8004a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8004a60:	1d3b      	adds	r3, r7, #4
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fb fd8e 	bl	8000584 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8004a68:	2000      	movs	r0, #0
 8004a6a:	f7fb feb3 	bl	80007d4 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_SYSPLL);
 8004a6e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004a72:	f7fb fe67 	bl	8000744 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(6U);
 8004a76:	2006      	movs	r0, #6
 8004a78:	f7fb ff38 	bl	80008ec <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 8004a7c:	f7fb ffc2 	bl	8000a04 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(3U, 100U);
 8004a80:	2003      	movs	r0, #3
 8004a82:	2164      	movs	r1, #100	; 0x64
 8004a84:	f7fb ffce 	bl	8000a24 <XMC_SCU_CLOCK_StartUsbPll>
  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(XMC_SCU_CLOCK_ECATCLKSRC_USBPLL);
 8004a88:	2000      	movs	r0, #0
 8004a8a:	f7ff ffcb 	bl	8004a24 <XMC_SCU_CLOCK_SetECATClockSource>
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(2U);
 8004a8e:	2002      	movs	r0, #2
 8004a90:	f7fb ff54 	bl	800093c <XMC_SCU_CLOCK_SetECATClockDivider>
#endif

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8004a94:	2000      	movs	r0, #0
 8004a96:	f7fb fe69 	bl	800076c <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8004a9a:	2001      	movs	r0, #1
 8004a9c:	f7fb ff3a 	bl	8000914 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

}
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	08005160 	.word	0x08005160

08004aac <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8004ab6:	4811      	ldr	r0, [pc, #68]	; (8004afc <DAVE_Init+0x50>)
 8004ab8:	f7ff ff9a 	bl	80049f0 <CLOCK_XMC4_Init>
 8004abc:	4603      	mov	r3, r0
 8004abe:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d104      	bne.n	8004ad0 <DAVE_Init+0x24>
  {
	 /**  Initialization of GLOBAL_CCU4 APP instance GLOBAL_CCU4_0 */
	 init_status = (DAVE_STATUS_t)GLOBAL_CCU4_Init(&GLOBAL_CCU4_0); 
 8004ac6:	480e      	ldr	r0, [pc, #56]	; (8004b00 <DAVE_Init+0x54>)
 8004ac8:	f7fd fc78 	bl	80023bc <GLOBAL_CCU4_Init>
 8004acc:	4603      	mov	r3, r0
 8004ace:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d104      	bne.n	8004ae0 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance TESTPIN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&TESTPIN); 
 8004ad6:	480b      	ldr	r0, [pc, #44]	; (8004b04 <DAVE_Init+0x58>)
 8004ad8:	f7ff fef6 	bl	80048c8 <DIGITAL_IO_Init>
 8004adc:	4603      	mov	r3, r0
 8004ade:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d104      	bne.n	8004af0 <DAVE_Init+0x44>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_0 */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_0); 
 8004ae6:	4808      	ldr	r0, [pc, #32]	; (8004b08 <DAVE_Init+0x5c>)
 8004ae8:	f7fc fe80 	bl	80017ec <SPI_MASTER_Init>
 8004aec:	4603      	mov	r3, r0
 8004aee:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8004af0:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	1fff0a2c 	.word	0x1fff0a2c
 8004b00:	1fff0850 	.word	0x1fff0850
 8004b04:	0800514c 	.word	0x0800514c
 8004b08:	1fff0844 	.word	0x1fff0844

08004b0c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	409a      	lsls	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	605a      	str	r2, [r3, #4]
}
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8004b38:	78fb      	ldrb	r3, [r7, #3]
 8004b3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	605a      	str	r2, [r3, #4]
}
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop

08004b50 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	7c1b      	ldrb	r3, [r3, #16]
 8004b60:	4610      	mov	r0, r2
 8004b62:	4619      	mov	r1, r3
 8004b64:	f7ff ffd2 	bl	8004b0c <XMC_GPIO_SetOutputHigh>
}
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop

08004b70 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	7c1b      	ldrb	r3, [r3, #16]
 8004b80:	4610      	mov	r0, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	f7ff ffd2 	bl	8004b2c <XMC_GPIO_SetOutputLow>
}
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop

08004b90 <XMC_SPI_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_ClearStatusFlag()
 */
__STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  return channel->PSR_SSCMode;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <SPI_MASTER_GetFlagStatus>:
 * @endcode<BR>
 *
 */

__STATIC_INLINE uint32_t SPI_MASTER_GetFlagStatus(const SPI_MASTER_t* handle, const uint32_t flag)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("SPI_MASTER_GetFlagStatus:handle NULL" , (handle != NULL));
  return (XMC_SPI_CH_GetStatusFlag(handle->channel) & flag);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff ffea 	bl	8004b90 <XMC_SPI_CH_GetStatusFlag>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	4013      	ands	r3, r2
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop

08004bcc <SPI_MASTER_IsTxBusy>:
 * }
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool SPI_MASTER_IsTxBusy(const SPI_MASTER_t* const handle)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("SPI_MASTER_IsTxBusy:handle NULL", (handle != NULL))
  return (handle->runtime->tx_busy);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bdc:	b2db      	uxtb	r3, r3
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop

08004bec <main>:
 * This routine is the application entry point. It is invoked by the device startup code. It is responsible for
 * invoking the App initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */
int main(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af02      	add	r7, sp, #8

  if(DAVE_Init() == DAVE_STATUS_FAILURE)
 8004bf2:	f7ff ff5b 	bl	8004aac <DAVE_Init>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d100      	bne.n	8004bfe <main+0x12>
  {
    /* Placeholder for error handler code. The while loop below can be replaced with an user error handler */
    XMC_DEBUG(("DAVE APPs initialization failed with status\n"));
    while(1U)
    {
    }
 8004bfc:	e7fe      	b.n	8004bfc <main+0x10>


	/* Start the two tasks as described in the accompanying application
	   note. */
	//xTaskCreate (prvBlinkyTask, ( const char * const ) "Blinky", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL );
	xTaskCreate (prvSendSPI, ( const char * const ) "SPI", 1000, NULL, tskIDLE_PRIORITY + 2, NULL );
 8004bfe:	2302      	movs	r3, #2
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	2300      	movs	r3, #0
 8004c04:	9301      	str	r3, [sp, #4]
 8004c06:	4805      	ldr	r0, [pc, #20]	; (8004c1c <main+0x30>)
 8004c08:	4905      	ldr	r1, [pc, #20]	; (8004c20 <main+0x34>)
 8004c0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f7fe fc94 	bl	800353c <xTaskCreate>


	/* Start the tasks running. */
	vTaskStartScheduler();
 8004c14:	f7fe fe16 	bl	8003844 <vTaskStartScheduler>

  while(1U)
  {
  }
 8004c18:	e7fe      	b.n	8004c18 <main+0x2c>
 8004c1a:	bf00      	nop
 8004c1c:	08004ded 	.word	0x08004ded
 8004c20:	08005174 	.word	0x08005174

08004c24 <imu_init>:
}

/*-----------------------------------------------------------*/
void imu_init(SPI_MASTER_t *SPI_MASTER_sel)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	uint8_t SendData[2];

	// Switch Register Bank
	SendData[0] = 0x76;
 8004c2c:	2376      	movs	r3, #118	; 0x76
 8004c2e:	723b      	strb	r3, [r7, #8]
	SendData[1]	= Bit1; //Register 2
 8004c30:	2302      	movs	r3, #2
 8004c32:	727b      	strb	r3, [r7, #9]
	if(SPI_MASTER_Transmit(SPI_MASTER_sel, SendData, 2) == SPI_MASTER_STATUS_SUCCESS)
 8004c34:	f107 0308 	add.w	r3, r7, #8
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	f7fc fde5 	bl	800180c <SPI_MASTER_Transmit>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d106      	bne.n	8004c56 <imu_init+0x32>
		while(SPI_MASTER_IsTxBusy(SPI_MASTER_sel));
 8004c48:	bf00      	nop
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff ffbe 	bl	8004bcc <SPI_MASTER_IsTxBusy>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f9      	bne.n	8004c4a <imu_init+0x26>

	// Accel AAF off
	SendData[0] = 0x03;
 8004c56:	2303      	movs	r3, #3
 8004c58:	723b      	strb	r3, [r7, #8]
	SendData[1]	= Bit0;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	727b      	strb	r3, [r7, #9]
	if(SPI_MASTER_Transmit(SPI_MASTER_sel, SendData, 2) == SPI_MASTER_STATUS_SUCCESS)
 8004c5e:	f107 0308 	add.w	r3, r7, #8
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	4619      	mov	r1, r3
 8004c66:	2202      	movs	r2, #2
 8004c68:	f7fc fdd0 	bl	800180c <SPI_MASTER_Transmit>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <imu_init+0x5c>
		while(SPI_MASTER_IsTxBusy(SPI_MASTER_sel));
 8004c72:	bf00      	nop
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff ffa9 	bl	8004bcc <SPI_MASTER_IsTxBusy>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1f9      	bne.n	8004c74 <imu_init+0x50>

	// Switch Register Bank
	SendData[0] = 0x76;
 8004c80:	2376      	movs	r3, #118	; 0x76
 8004c82:	723b      	strb	r3, [r7, #8]
	SendData[1]	= Bit0; //Register 1
 8004c84:	2301      	movs	r3, #1
 8004c86:	727b      	strb	r3, [r7, #9]
	if(SPI_MASTER_Transmit(SPI_MASTER_sel, SendData, 2) == SPI_MASTER_STATUS_SUCCESS)
 8004c88:	f107 0308 	add.w	r3, r7, #8
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	2202      	movs	r2, #2
 8004c92:	f7fc fdbb 	bl	800180c <SPI_MASTER_Transmit>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d106      	bne.n	8004caa <imu_init+0x86>
		while(SPI_MASTER_IsTxBusy(SPI_MASTER_sel));
 8004c9c:	bf00      	nop
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff ff94 	bl	8004bcc <SPI_MASTER_IsTxBusy>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f9      	bne.n	8004c9e <imu_init+0x7a>

	// Gyro Notch off; AAF off
	SendData[0] = 0x0B;
 8004caa:	230b      	movs	r3, #11
 8004cac:	723b      	strb	r3, [r7, #8]
	SendData[1]	= Bit1 | Bit0;
 8004cae:	2202      	movs	r2, #2
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	727b      	strb	r3, [r7, #9]
	if(SPI_MASTER_Transmit(SPI_MASTER_sel, SendData, 2) == SPI_MASTER_STATUS_SUCCESS)
 8004cb8:	f107 0308 	add.w	r3, r7, #8
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	f7fc fda3 	bl	800180c <SPI_MASTER_Transmit>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <imu_init+0xb6>
		while(SPI_MASTER_IsTxBusy(SPI_MASTER_sel));
 8004ccc:	bf00      	nop
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7ff ff7c 	bl	8004bcc <SPI_MASTER_IsTxBusy>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f9      	bne.n	8004cce <imu_init+0xaa>

	// Switch Register Bank
	SendData[0] = 0x76;
 8004cda:	2376      	movs	r3, #118	; 0x76
 8004cdc:	723b      	strb	r3, [r7, #8]
	SendData[1]	= 0x00; //Register 0
 8004cde:	2300      	movs	r3, #0
 8004ce0:	727b      	strb	r3, [r7, #9]
	if(SPI_MASTER_Transmit(SPI_MASTER_sel, SendData, 2) == SPI_MASTER_STATUS_SUCCESS)
 8004ce2:	f107 0308 	add.w	r3, r7, #8
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	2202      	movs	r2, #2
 8004cec:	f7fc fd8e 	bl	800180c <SPI_MASTER_Transmit>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <imu_init+0xe0>
		while(SPI_MASTER_IsTxBusy(SPI_MASTER_sel));
 8004cf6:	bf00      	nop
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff ff67 	bl	8004bcc <SPI_MASTER_IsTxBusy>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1f9      	bne.n	8004cf8 <imu_init+0xd4>
		while(SPI_MASTER_IsTxBusy(SPI_MASTER_sel));
		*/


	//// 7:6 Reserved | 5 TEMP_DIS | 4 IDLE | 3:2 GYRO_MODE | 1:0 ACCEL_MODE
	uint8_t LN_Mode = Bit1 | Bit0;
 8004d04:	2202      	movs	r2, #2
 8004d06:	2301      	movs	r3, #1
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	72fb      	strb	r3, [r7, #11]
	uint8_t pwr_config = (LN_Mode <<2) | (LN_Mode);
 8004d0c:	7afb      	ldrb	r3, [r7, #11]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	7afb      	ldrb	r3, [r7, #11]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	72bb      	strb	r3, [r7, #10]
	SendData[0] = PWR_MGMT0;
 8004d1a:	234e      	movs	r3, #78	; 0x4e
 8004d1c:	723b      	strb	r3, [r7, #8]
	SendData[1] = pwr_config;
 8004d1e:	7abb      	ldrb	r3, [r7, #10]
 8004d20:	727b      	strb	r3, [r7, #9]
	if(SPI_MASTER_Transmit(SPI_MASTER_sel, SendData, 2) == SPI_MASTER_STATUS_SUCCESS)
 8004d22:	f107 0308 	add.w	r3, r7, #8
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	4619      	mov	r1, r3
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f7fc fd6e 	bl	800180c <SPI_MASTER_Transmit>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <imu_init+0x120>
		while(SPI_MASTER_IsTxBusy(SPI_MASTER_sel));
 8004d36:	bf00      	nop
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff ff47 	bl	8004bcc <SPI_MASTER_IsTxBusy>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1f9      	bne.n	8004d38 <imu_init+0x114>

	int counter = 0;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]
	while(counter<3000000)
 8004d48:	e002      	b.n	8004d50 <imu_init+0x12c>
	{
		counter++;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	60fb      	str	r3, [r7, #12]
	SendData[1] = pwr_config;
	if(SPI_MASTER_Transmit(SPI_MASTER_sel, SendData, 2) == SPI_MASTER_STATUS_SUCCESS)
		while(SPI_MASTER_IsTxBusy(SPI_MASTER_sel));

	int counter = 0;
	while(counter<3000000)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4a25      	ldr	r2, [pc, #148]	; (8004de8 <imu_init+0x1c4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	ddf8      	ble.n	8004d4a <imu_init+0x126>
		counter++;
	}


	// 7:5 accelerometer output range | 3:0 output data rate
	SendData[0] = ACCEL_CONFIG0;
 8004d58:	2350      	movs	r3, #80	; 0x50
 8004d5a:	723b      	strb	r3, [r7, #8]
	SendData[1]	= _16_G | _32_kHz;
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4313      	orrs	r3, r2
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	727b      	strb	r3, [r7, #9]
	if(SPI_MASTER_Transmit(SPI_MASTER_sel, SendData, 2) == SPI_MASTER_STATUS_SUCCESS)
 8004d66:	f107 0308 	add.w	r3, r7, #8
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f7fc fd4c 	bl	800180c <SPI_MASTER_Transmit>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <imu_init+0x164>
		while(SPI_MASTER_IsTxBusy(SPI_MASTER_sel));
 8004d7a:	bf00      	nop
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff ff25 	bl	8004bcc <SPI_MASTER_IsTxBusy>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f9      	bne.n	8004d7c <imu_init+0x158>

	counter = 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]
	while(counter<3000000)
 8004d8c:	e002      	b.n	8004d94 <imu_init+0x170>
	{
		counter++;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3301      	adds	r3, #1
 8004d92:	60fb      	str	r3, [r7, #12]
	SendData[1]	= _16_G | _32_kHz;
	if(SPI_MASTER_Transmit(SPI_MASTER_sel, SendData, 2) == SPI_MASTER_STATUS_SUCCESS)
		while(SPI_MASTER_IsTxBusy(SPI_MASTER_sel));

	counter = 0;
	while(counter<3000000)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <imu_init+0x1c4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	ddf8      	ble.n	8004d8e <imu_init+0x16a>
	{
		counter++;
	}

	// 7:5 gyroscope output range | 3:0 output data rate
	SendData[0] = GYRO_CONFIG0;
 8004d9c:	234f      	movs	r3, #79	; 0x4f
 8004d9e:	723b      	strb	r3, [r7, #8]
	SendData[1] = _125_DPS | _32_kHz;
 8004da0:	2280      	movs	r2, #128	; 0x80
 8004da2:	2301      	movs	r3, #1
 8004da4:	4313      	orrs	r3, r2
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	727b      	strb	r3, [r7, #9]
	if(SPI_MASTER_Transmit(SPI_MASTER_sel, SendData, 2) == SPI_MASTER_STATUS_SUCCESS)
 8004daa:	f107 0308 	add.w	r3, r7, #8
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4619      	mov	r1, r3
 8004db2:	2202      	movs	r2, #2
 8004db4:	f7fc fd2a 	bl	800180c <SPI_MASTER_Transmit>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <imu_init+0x1a8>
			while(SPI_MASTER_IsTxBusy(SPI_MASTER_sel));
 8004dbe:	bf00      	nop
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff ff03 	bl	8004bcc <SPI_MASTER_IsTxBusy>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1f9      	bne.n	8004dc0 <imu_init+0x19c>

	counter = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]
	while(counter<3000000)
 8004dd0:	e002      	b.n	8004dd8 <imu_init+0x1b4>
	{
		counter++;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	60fb      	str	r3, [r7, #12]
	SendData[1] = _125_DPS | _32_kHz;
	if(SPI_MASTER_Transmit(SPI_MASTER_sel, SendData, 2) == SPI_MASTER_STATUS_SUCCESS)
			while(SPI_MASTER_IsTxBusy(SPI_MASTER_sel));

	counter = 0;
	while(counter<3000000)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4a03      	ldr	r2, [pc, #12]	; (8004de8 <imu_init+0x1c4>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	ddf8      	ble.n	8004dd2 <imu_init+0x1ae>
	{
		counter++;
	}

}
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	002dc6bf 	.word	0x002dc6bf

08004dec <prvSendSPI>:



static void prvSendSPI( void *pvParameters )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]

//	uint8_t SPI_WriteBuffer[24]  = { ACCEL_DATA_X1 | Bit7, 0,  ACCEL_DATA_X0 | Bit7, 0,  ACCEL_DATA_Y1 | Bit7, 0,  ACCEL_DATA_Y0 | Bit7, 0,  ACCEL_DATA_Z0 | Bit7, 0,  GYRO_DATA_X1 | Bit7, 0,
//									GYRO_DATA_X0 | Bit7, 0,  GYRO_DATA_Y1 | Bit7, 0,  GYRO_DATA_Y0 | Bit7, 0,  GYRO_DATA_Z1 | Bit7, 0,  GYRO_DATA_Z0 | Bit7, 0,  0x75 | Bit7, 0};
//	uint8_t SPI_ReadBuffer[24] = {0};

	uint8_t SPI_WriteBuffer[2]  = { ACCEL_DATA_X1 | Bit7, 0};
 8004df4:	221f      	movs	r2, #31
 8004df6:	2380      	movs	r3, #128	; 0x80
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	733b      	strb	r3, [r7, #12]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	737b      	strb	r3, [r7, #13]
	uint8_t SPI_ReadBuffer[2] = {0};
 8004e02:	2300      	movs	r3, #0
 8004e04:	813b      	strh	r3, [r7, #8]


	DIGITAL_IO_SetOutputLow(&TESTPIN);
 8004e06:	481a      	ldr	r0, [pc, #104]	; (8004e70 <prvSendSPI+0x84>)
 8004e08:	f7ff feb2 	bl	8004b70 <DIGITAL_IO_SetOutputLow>
	imu_init(&SPI_MASTER_0);
 8004e0c:	4819      	ldr	r0, [pc, #100]	; (8004e74 <prvSendSPI+0x88>)
 8004e0e:	f7ff ff09 	bl	8004c24 <imu_init>
	DIGITAL_IO_SetOutputHigh(&TESTPIN);
 8004e12:	4817      	ldr	r0, [pc, #92]	; (8004e70 <prvSendSPI+0x84>)
 8004e14:	f7ff fe9c 	bl	8004b50 <DIGITAL_IO_SetOutputHigh>

	for( ;; )
	{


 		DIGITAL_IO_SetOutputLow(&TESTPIN);
 8004e18:	4815      	ldr	r0, [pc, #84]	; (8004e70 <prvSendSPI+0x84>)
 8004e1a:	f7ff fea9 	bl	8004b70 <DIGITAL_IO_SetOutputLow>

 		SPI_MASTER_Transfer(&SPI_MASTER_0, SPI_WriteBuffer, SPI_ReadBuffer, 2);
 8004e1e:	f107 020c 	add.w	r2, r7, #12
 8004e22:	f107 0308 	add.w	r3, r7, #8
 8004e26:	4813      	ldr	r0, [pc, #76]	; (8004e74 <prvSendSPI+0x88>)
 8004e28:	4611      	mov	r1, r2
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	f7fc fd7d 	bl	800192c <SPI_MASTER_Transfer>

 		 		/* Wait until the data transmission is finished */
 		 		while(SPI_MASTER_0.runtime->tx_busy)
 8004e32:	bf00      	nop
 8004e34:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <prvSendSPI+0x88>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f8      	bne.n	8004e34 <prvSendSPI+0x48>
 		 		{
 		 		}

 		 		while(SPI_MASTER_0.runtime->rx_busy)
 8004e42:	bf00      	nop
 8004e44:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <prvSendSPI+0x88>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	7fdb      	ldrb	r3, [r3, #31]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1f9      	bne.n	8004e44 <prvSendSPI+0x58>
 		 		{
 		 		}

				/* Ensure the last byte is shifted out from the buffer at lower baud rates, when frame end mode is disabled. */
				while (SPI_MASTER_GetFlagStatus(&SPI_MASTER_0, (uint32_t)XMC_SPI_CH_STATUS_FLAG_MSLS) != 0U)
 8004e50:	bf00      	nop
 8004e52:	4808      	ldr	r0, [pc, #32]	; (8004e74 <prvSendSPI+0x88>)
 8004e54:	2101      	movs	r1, #1
 8004e56:	f7ff fea7 	bl	8004ba8 <SPI_MASTER_GetFlagStatus>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1f8      	bne.n	8004e52 <prvSendSPI+0x66>
				{

				}

 		 		DIGITAL_IO_SetOutputHigh(&TESTPIN);
 8004e60:	4803      	ldr	r0, [pc, #12]	; (8004e70 <prvSendSPI+0x84>)
 8004e62:	f7ff fe75 	bl	8004b50 <DIGITAL_IO_SetOutputHigh>
//		 }




	  vTaskDelay(2000);
 8004e66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004e6a:	f7fe fcb9 	bl	80037e0 <vTaskDelay>
	}
 8004e6e:	e7d3      	b.n	8004e18 <prvSendSPI+0x2c>
 8004e70:	0800514c 	.word	0x0800514c
 8004e74:	1fff0844 	.word	0x1fff0844

08004e78 <__errno>:
 8004e78:	4b01      	ldr	r3, [pc, #4]	; (8004e80 <__errno+0x8>)
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	1fff08c8 	.word	0x1fff08c8

08004e84 <__libc_init_array>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <__libc_init_array+0x3c>)
 8004e88:	4c0e      	ldr	r4, [pc, #56]	; (8004ec4 <__libc_init_array+0x40>)
 8004e8a:	1ae4      	subs	r4, r4, r3
 8004e8c:	10a4      	asrs	r4, r4, #2
 8004e8e:	2500      	movs	r5, #0
 8004e90:	461e      	mov	r6, r3
 8004e92:	42a5      	cmp	r5, r4
 8004e94:	d004      	beq.n	8004ea0 <__libc_init_array+0x1c>
 8004e96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e9a:	4798      	blx	r3
 8004e9c:	3501      	adds	r5, #1
 8004e9e:	e7f8      	b.n	8004e92 <__libc_init_array+0xe>
 8004ea0:	f7fc fb70 	bl	8001584 <_init>
 8004ea4:	4c08      	ldr	r4, [pc, #32]	; (8004ec8 <__libc_init_array+0x44>)
 8004ea6:	4b09      	ldr	r3, [pc, #36]	; (8004ecc <__libc_init_array+0x48>)
 8004ea8:	1ae4      	subs	r4, r4, r3
 8004eaa:	10a4      	asrs	r4, r4, #2
 8004eac:	2500      	movs	r5, #0
 8004eae:	461e      	mov	r6, r3
 8004eb0:	42a5      	cmp	r5, r4
 8004eb2:	d004      	beq.n	8004ebe <__libc_init_array+0x3a>
 8004eb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004eb8:	4798      	blx	r3
 8004eba:	3501      	adds	r5, #1
 8004ebc:	e7f8      	b.n	8004eb0 <__libc_init_array+0x2c>
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
 8004ec0:	1fff08cc 	.word	0x1fff08cc
 8004ec4:	1fff08cc 	.word	0x1fff08cc
 8004ec8:	1fff08cc 	.word	0x1fff08cc
 8004ecc:	1fff08cc 	.word	0x1fff08cc

08004ed0 <malloc>:
 8004ed0:	4b02      	ldr	r3, [pc, #8]	; (8004edc <malloc+0xc>)
 8004ed2:	4601      	mov	r1, r0
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	f000 b863 	b.w	8004fa0 <_malloc_r>
 8004eda:	bf00      	nop
 8004edc:	1fff08c8 	.word	0x1fff08c8

08004ee0 <free>:
 8004ee0:	4b02      	ldr	r3, [pc, #8]	; (8004eec <free+0xc>)
 8004ee2:	4601      	mov	r1, r0
 8004ee4:	6818      	ldr	r0, [r3, #0]
 8004ee6:	f000 b817 	b.w	8004f18 <_free_r>
 8004eea:	bf00      	nop
 8004eec:	1fff08c8 	.word	0x1fff08c8

08004ef0 <memcpy>:
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	1e43      	subs	r3, r0, #1
 8004ef4:	440a      	add	r2, r1
 8004ef6:	4291      	cmp	r1, r2
 8004ef8:	d004      	beq.n	8004f04 <memcpy+0x14>
 8004efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004efe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f02:	e7f8      	b.n	8004ef6 <memcpy+0x6>
 8004f04:	bd10      	pop	{r4, pc}

08004f06 <memset>:
 8004f06:	4402      	add	r2, r0
 8004f08:	4603      	mov	r3, r0
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d002      	beq.n	8004f14 <memset+0xe>
 8004f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f12:	e7fa      	b.n	8004f0a <memset+0x4>
 8004f14:	4770      	bx	lr
	...

08004f18 <_free_r>:
 8004f18:	b530      	push	{r4, r5, lr}
 8004f1a:	2900      	cmp	r1, #0
 8004f1c:	d03d      	beq.n	8004f9a <_free_r+0x82>
 8004f1e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8004f22:	1f0b      	subs	r3, r1, #4
 8004f24:	491d      	ldr	r1, [pc, #116]	; (8004f9c <_free_r+0x84>)
 8004f26:	2a00      	cmp	r2, #0
 8004f28:	bfb8      	it	lt
 8004f2a:	189b      	addlt	r3, r3, r2
 8004f2c:	680a      	ldr	r2, [r1, #0]
 8004f2e:	460c      	mov	r4, r1
 8004f30:	b912      	cbnz	r2, 8004f38 <_free_r+0x20>
 8004f32:	605a      	str	r2, [r3, #4]
 8004f34:	600b      	str	r3, [r1, #0]
 8004f36:	bd30      	pop	{r4, r5, pc}
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d20d      	bcs.n	8004f58 <_free_r+0x40>
 8004f3c:	6819      	ldr	r1, [r3, #0]
 8004f3e:	1858      	adds	r0, r3, r1
 8004f40:	4290      	cmp	r0, r2
 8004f42:	bf01      	itttt	eq
 8004f44:	585a      	ldreq	r2, [r3, r1]
 8004f46:	1852      	addeq	r2, r2, r1
 8004f48:	601a      	streq	r2, [r3, #0]
 8004f4a:	6842      	ldreq	r2, [r0, #4]
 8004f4c:	605a      	str	r2, [r3, #4]
 8004f4e:	6023      	str	r3, [r4, #0]
 8004f50:	bd30      	pop	{r4, r5, pc}
 8004f52:	4299      	cmp	r1, r3
 8004f54:	d803      	bhi.n	8004f5e <_free_r+0x46>
 8004f56:	460a      	mov	r2, r1
 8004f58:	6851      	ldr	r1, [r2, #4]
 8004f5a:	2900      	cmp	r1, #0
 8004f5c:	d1f9      	bne.n	8004f52 <_free_r+0x3a>
 8004f5e:	6814      	ldr	r4, [r2, #0]
 8004f60:	1915      	adds	r5, r2, r4
 8004f62:	429d      	cmp	r5, r3
 8004f64:	d10a      	bne.n	8004f7c <_free_r+0x64>
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4423      	add	r3, r4
 8004f6a:	18d0      	adds	r0, r2, r3
 8004f6c:	4288      	cmp	r0, r1
 8004f6e:	6013      	str	r3, [r2, #0]
 8004f70:	d113      	bne.n	8004f9a <_free_r+0x82>
 8004f72:	6808      	ldr	r0, [r1, #0]
 8004f74:	4403      	add	r3, r0
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	684b      	ldr	r3, [r1, #4]
 8004f7a:	e00d      	b.n	8004f98 <_free_r+0x80>
 8004f7c:	d902      	bls.n	8004f84 <_free_r+0x6c>
 8004f7e:	230c      	movs	r3, #12
 8004f80:	6003      	str	r3, [r0, #0]
 8004f82:	bd30      	pop	{r4, r5, pc}
 8004f84:	681c      	ldr	r4, [r3, #0]
 8004f86:	1918      	adds	r0, r3, r4
 8004f88:	4288      	cmp	r0, r1
 8004f8a:	bf04      	itt	eq
 8004f8c:	6808      	ldreq	r0, [r1, #0]
 8004f8e:	6849      	ldreq	r1, [r1, #4]
 8004f90:	6059      	str	r1, [r3, #4]
 8004f92:	bf04      	itt	eq
 8004f94:	1900      	addeq	r0, r0, r4
 8004f96:	6018      	streq	r0, [r3, #0]
 8004f98:	6053      	str	r3, [r2, #4]
 8004f9a:	bd30      	pop	{r4, r5, pc}
 8004f9c:	1fff0a34 	.word	0x1fff0a34

08004fa0 <_malloc_r>:
 8004fa0:	b570      	push	{r4, r5, r6, lr}
 8004fa2:	1ccc      	adds	r4, r1, #3
 8004fa4:	f024 0403 	bic.w	r4, r4, #3
 8004fa8:	3408      	adds	r4, #8
 8004faa:	2c0c      	cmp	r4, #12
 8004fac:	bf38      	it	cc
 8004fae:	240c      	movcc	r4, #12
 8004fb0:	2c00      	cmp	r4, #0
 8004fb2:	4606      	mov	r6, r0
 8004fb4:	da03      	bge.n	8004fbe <_malloc_r+0x1e>
 8004fb6:	230c      	movs	r3, #12
 8004fb8:	6033      	str	r3, [r6, #0]
 8004fba:	2000      	movs	r0, #0
 8004fbc:	bd70      	pop	{r4, r5, r6, pc}
 8004fbe:	428c      	cmp	r4, r1
 8004fc0:	d3f9      	bcc.n	8004fb6 <_malloc_r+0x16>
 8004fc2:	4a20      	ldr	r2, [pc, #128]	; (8005044 <_malloc_r+0xa4>)
 8004fc4:	6813      	ldr	r3, [r2, #0]
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	4619      	mov	r1, r3
 8004fca:	b1a1      	cbz	r1, 8004ff6 <_malloc_r+0x56>
 8004fcc:	680a      	ldr	r2, [r1, #0]
 8004fce:	1b12      	subs	r2, r2, r4
 8004fd0:	d40e      	bmi.n	8004ff0 <_malloc_r+0x50>
 8004fd2:	2a0b      	cmp	r2, #11
 8004fd4:	d903      	bls.n	8004fde <_malloc_r+0x3e>
 8004fd6:	600a      	str	r2, [r1, #0]
 8004fd8:	188b      	adds	r3, r1, r2
 8004fda:	508c      	str	r4, [r1, r2]
 8004fdc:	e01f      	b.n	800501e <_malloc_r+0x7e>
 8004fde:	428b      	cmp	r3, r1
 8004fe0:	bf0d      	iteet	eq
 8004fe2:	685a      	ldreq	r2, [r3, #4]
 8004fe4:	684a      	ldrne	r2, [r1, #4]
 8004fe6:	605a      	strne	r2, [r3, #4]
 8004fe8:	6002      	streq	r2, [r0, #0]
 8004fea:	bf18      	it	ne
 8004fec:	460b      	movne	r3, r1
 8004fee:	e016      	b.n	800501e <_malloc_r+0x7e>
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	6849      	ldr	r1, [r1, #4]
 8004ff4:	e7e9      	b.n	8004fca <_malloc_r+0x2a>
 8004ff6:	4d14      	ldr	r5, [pc, #80]	; (8005048 <_malloc_r+0xa8>)
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	b91b      	cbnz	r3, 8005004 <_malloc_r+0x64>
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	f000 f825 	bl	800504c <_sbrk_r>
 8005002:	6028      	str	r0, [r5, #0]
 8005004:	4630      	mov	r0, r6
 8005006:	4621      	mov	r1, r4
 8005008:	f000 f820 	bl	800504c <_sbrk_r>
 800500c:	1c42      	adds	r2, r0, #1
 800500e:	4603      	mov	r3, r0
 8005010:	d0d1      	beq.n	8004fb6 <_malloc_r+0x16>
 8005012:	1cc5      	adds	r5, r0, #3
 8005014:	f025 0503 	bic.w	r5, r5, #3
 8005018:	4285      	cmp	r5, r0
 800501a:	d10a      	bne.n	8005032 <_malloc_r+0x92>
 800501c:	601c      	str	r4, [r3, #0]
 800501e:	f103 000b 	add.w	r0, r3, #11
 8005022:	1d1a      	adds	r2, r3, #4
 8005024:	f020 0007 	bic.w	r0, r0, #7
 8005028:	1a82      	subs	r2, r0, r2
 800502a:	d00a      	beq.n	8005042 <_malloc_r+0xa2>
 800502c:	4251      	negs	r1, r2
 800502e:	5099      	str	r1, [r3, r2]
 8005030:	bd70      	pop	{r4, r5, r6, pc}
 8005032:	4630      	mov	r0, r6
 8005034:	1ae9      	subs	r1, r5, r3
 8005036:	f000 f809 	bl	800504c <_sbrk_r>
 800503a:	3001      	adds	r0, #1
 800503c:	d0bb      	beq.n	8004fb6 <_malloc_r+0x16>
 800503e:	462b      	mov	r3, r5
 8005040:	e7ec      	b.n	800501c <_malloc_r+0x7c>
 8005042:	bd70      	pop	{r4, r5, r6, pc}
 8005044:	1fff0a34 	.word	0x1fff0a34
 8005048:	1fff0a30 	.word	0x1fff0a30

0800504c <_sbrk_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	4c06      	ldr	r4, [pc, #24]	; (8005068 <_sbrk_r+0x1c>)
 8005050:	2300      	movs	r3, #0
 8005052:	4605      	mov	r5, r0
 8005054:	4608      	mov	r0, r1
 8005056:	6023      	str	r3, [r4, #0]
 8005058:	f7fc fa60 	bl	800151c <_sbrk>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d102      	bne.n	8005066 <_sbrk_r+0x1a>
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	b103      	cbz	r3, 8005066 <_sbrk_r+0x1a>
 8005064:	602b      	str	r3, [r5, #0]
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	1fff0a78 	.word	0x1fff0a78

0800506c <SPI_MASTER_0_MOSI>:
 800506c:	48028200 00000005                       ...H....

08005074 <SPI_MASTER_0_MISO>:
 8005074:	48028200 00000002                       ...H....

0800507c <SPI_MASTER_0_SCLKOUT>:
 800507c:	48028200 00000004                       ...H....

08005084 <SPI_MASTER_0_SCLKOUT_Config>:
 8005084:	00000090 00000001 00000001 00000000     ................
 8005094:	00000000                                ....

08005098 <SPI_MASTER_0_Config>:
 8005098:	1fff0814 08002271 0800506c 1fff0800     ....q"..lP......
 80050a8:	08005074 1fff08d0 00000000 00000000     tP..............
	...
 80050c0:	0800507c 08005084 00000000 00000000     |P...P..........
	...
 8005114:	00000404 00000000 00000000 00000102     ................
 8005124:	454c4449 00000000 09632509 25097525     IDLE.....%c.%u.%
 8005134:	75250975 00000a0d 20726d54 00637653     u.%u....Tmr Svc.
 8005144:	51726d54 00000000                       TmrQ....

0800514c <TESTPIN>:
 800514c:	48028100 00000080 00000001 00000000     ...H............
 800515c:	0000000e 01010230 00010000 00000000     ....0...........
 800516c:	00010000 01010102 00495053 00000043     ........SPI.C...
